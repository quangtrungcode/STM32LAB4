
LAB4_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de8  08003de8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003de8  08003de8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de8  08003de8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000074  08003e64  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08003e64  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5f1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc3  00000000  00000000  0002a68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171f2  00000000  00000000  0002d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e500  00000000  00000000  00044b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a9c  00000000  00000000  00053082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b04  00000000  00000000  000d5b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003da0 	.word	0x08003da0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003da0 	.word	0x08003da0

0800014c <isButtonPressed>:
int KeyReg2[NUM_BUTTONS]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg3[NUM_BUTTONS]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPress[NUM_BUTTONS]={200,200,200};
GPIO_TypeDef* Button_GPIO_Port[NUM_BUTTONS]={Button0_GPIO_Port,Button1_GPIO_Port,Button2_GPIO_Port};
uint16_t Button_Pin[NUM_BUTTONS]={Button0_Pin,Button1_Pin,Button2_Pin};
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(Button_flag[index]==1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		Button_flag[index]=0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	Button_flag[index]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000090 	.word	0x20000090

080001a0 <getKeyInput>:
//				KeyReg3=NORMAL_STATE;
//			}
//		}
//	}
//}
void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(Button_GPIO_Port[i], Button_Pin[i]); // Assuming GPIO ports/pins are in arrays
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f002 fdb2 	bl	8002d48 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001f0:	4a2a      	ldr	r2, [pc, #168]	; (800029c <getKeyInput+0xfc>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4927      	ldr	r1, [pc, #156]	; (8000298 <getKeyInput+0xf8>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4924      	ldr	r1, [pc, #144]	; (80002a0 <getKeyInput+0x100>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000218:	4a24      	ldr	r2, [pc, #144]	; (80002ac <getKeyInput+0x10c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491f      	ldr	r1, [pc, #124]	; (80002a0 <getKeyInput+0x100>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <getKeyInput+0x100>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 800023c:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <getKeyInput+0x100>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					subKeyProcess(i);  // Assuming a modified subKeyProcess that accepts button index
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff99 	bl	8000180 <subKeyProcess>
					TimerForKeyPress[i] = 200;
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <getKeyInput+0x110>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	21c8      	movs	r1, #200	; 0xc8
 8000254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			} else {
				TimerForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000018 	.word	0x20000018
 80002a4:	2000003c 	.word	0x2000003c
 80002a8:	20000048 	.word	0x20000048
 80002ac:	20000024 	.word	0x20000024
 80002b0:	20000030 	.word	0x20000030

080002b4 <fsm_automatic_run>:
//		default:
//			break;
//	}
//}

void fsm_automatic_run(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	switch(status){
 80002b8:	4b65      	ldr	r3, [pc, #404]	; (8000450 <fsm_automatic_run+0x19c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3b01      	subs	r3, #1
 80002be:	2b04      	cmp	r3, #4
 80002c0:	f200 831d 	bhi.w	80008fe <fsm_automatic_run+0x64a>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <fsm_automatic_run+0x18>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002e1 	.word	0x080002e1
 80002d0:	0800062b 	.word	0x0800062b
 80002d4:	080006c3 	.word	0x080006c3
 80002d8:	080007d1 	.word	0x080007d1
 80002dc:	08000869 	.word	0x08000869
		case INIT:
			 //  counter=0;

               set_led();
 80002e0:	f002 f944 	bl	800256c <set_led>
               set_led7_segement();
 80002e4:	f000 ffac 	bl	8001240 <set_led7_segement>

       		if(counterred==(countergreen+counteryellow+1)){
 80002e8:	4b5a      	ldr	r3, [pc, #360]	; (8000454 <fsm_automatic_run+0x1a0>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4b5a      	ldr	r3, [pc, #360]	; (8000458 <fsm_automatic_run+0x1a4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	4b59      	ldr	r3, [pc, #356]	; (800045c <fsm_automatic_run+0x1a8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f040 80d3 	bne.w	80004a4 <fsm_automatic_run+0x1f0>
       			a=counterred;
 80002fe:	4b57      	ldr	r3, [pc, #348]	; (800045c <fsm_automatic_run+0x1a8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a57      	ldr	r2, [pc, #348]	; (8000460 <fsm_automatic_run+0x1ac>)
 8000304:	6013      	str	r3, [r2, #0]
       			b=countergreen;
 8000306:	4b53      	ldr	r3, [pc, #332]	; (8000454 <fsm_automatic_run+0x1a0>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a56      	ldr	r2, [pc, #344]	; (8000464 <fsm_automatic_run+0x1b0>)
 800030c:	6013      	str	r3, [r2, #0]
       			c=counteryellow;
 800030e:	4b52      	ldr	r3, [pc, #328]	; (8000458 <fsm_automatic_run+0x1a4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a55      	ldr	r2, [pc, #340]	; (8000468 <fsm_automatic_run+0x1b4>)
 8000314:	6013      	str	r3, [r2, #0]
       			idx_led13=0;
 8000316:	4b55      	ldr	r3, [pc, #340]	; (800046c <fsm_automatic_run+0x1b8>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
       			idx_led02=0;
 800031c:	4b54      	ldr	r3, [pc, #336]	; (8000470 <fsm_automatic_run+0x1bc>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
       			status=AUTO_RED1_GREEN2;
 8000322:	4b4b      	ldr	r3, [pc, #300]	; (8000450 <fsm_automatic_run+0x19c>)
 8000324:	2202      	movs	r2, #2
 8000326:	601a      	str	r2, [r3, #0]
    task_id1 =  SCH_Add_Task(led7_segment_run02, 50, 100);
 8000328:	2264      	movs	r2, #100	; 0x64
 800032a:	2132      	movs	r1, #50	; 0x32
 800032c:	4851      	ldr	r0, [pc, #324]	; (8000474 <fsm_automatic_run+0x1c0>)
 800032e:	f001 ff53 	bl	80021d8 <SCH_Add_Task>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	4b50      	ldr	r3, [pc, #320]	; (8000478 <fsm_automatic_run+0x1c4>)
 8000338:	601a      	str	r2, [r3, #0]
    task_id2 =  SCH_Add_Task(led7_segment_run13, 0, 100);
 800033a:	2264      	movs	r2, #100	; 0x64
 800033c:	2100      	movs	r1, #0
 800033e:	484f      	ldr	r0, [pc, #316]	; (800047c <fsm_automatic_run+0x1c8>)
 8000340:	f001 ff4a 	bl	80021d8 <SCH_Add_Task>
 8000344:	4603      	mov	r3, r0
 8000346:	461a      	mov	r2, r3
 8000348:	4b4d      	ldr	r3, [pc, #308]	; (8000480 <fsm_automatic_run+0x1cc>)
 800034a:	601a      	str	r2, [r3, #0]
    task_id3 =  SCH_Add_Task(status_transition_AUTO_RED1_GREEN2, b*100, (a+b+c+3)*100);
 800034c:	4b45      	ldr	r3, [pc, #276]	; (8000464 <fsm_automatic_run+0x1b0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2264      	movs	r2, #100	; 0x64
 8000352:	fb02 f303 	mul.w	r3, r2, r3
 8000356:	4619      	mov	r1, r3
 8000358:	4b41      	ldr	r3, [pc, #260]	; (8000460 <fsm_automatic_run+0x1ac>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b41      	ldr	r3, [pc, #260]	; (8000464 <fsm_automatic_run+0x1b0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	441a      	add	r2, r3
 8000362:	4b41      	ldr	r3, [pc, #260]	; (8000468 <fsm_automatic_run+0x1b4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4413      	add	r3, r2
 8000368:	3303      	adds	r3, #3
 800036a:	2264      	movs	r2, #100	; 0x64
 800036c:	fb02 f303 	mul.w	r3, r2, r3
 8000370:	461a      	mov	r2, r3
 8000372:	4844      	ldr	r0, [pc, #272]	; (8000484 <fsm_automatic_run+0x1d0>)
 8000374:	f001 ff30 	bl	80021d8 <SCH_Add_Task>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	4b42      	ldr	r3, [pc, #264]	; (8000488 <fsm_automatic_run+0x1d4>)
 800037e:	601a      	str	r2, [r3, #0]
    task_id4 =		SCH_Add_Task(status_transition_AUTO_RED1_YELLOW2, (b+c+1)*100, (a+b+c+3)*100);
 8000380:	4b38      	ldr	r3, [pc, #224]	; (8000464 <fsm_automatic_run+0x1b0>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	4b38      	ldr	r3, [pc, #224]	; (8000468 <fsm_automatic_run+0x1b4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4413      	add	r3, r2
 800038a:	3301      	adds	r3, #1
 800038c:	2264      	movs	r2, #100	; 0x64
 800038e:	fb02 f303 	mul.w	r3, r2, r3
 8000392:	4619      	mov	r1, r3
 8000394:	4b32      	ldr	r3, [pc, #200]	; (8000460 <fsm_automatic_run+0x1ac>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b32      	ldr	r3, [pc, #200]	; (8000464 <fsm_automatic_run+0x1b0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	441a      	add	r2, r3
 800039e:	4b32      	ldr	r3, [pc, #200]	; (8000468 <fsm_automatic_run+0x1b4>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4413      	add	r3, r2
 80003a4:	3303      	adds	r3, #3
 80003a6:	2264      	movs	r2, #100	; 0x64
 80003a8:	fb02 f303 	mul.w	r3, r2, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	4837      	ldr	r0, [pc, #220]	; (800048c <fsm_automatic_run+0x1d8>)
 80003b0:	f001 ff12 	bl	80021d8 <SCH_Add_Task>
 80003b4:	4603      	mov	r3, r0
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b35      	ldr	r3, [pc, #212]	; (8000490 <fsm_automatic_run+0x1dc>)
 80003ba:	601a      	str	r2, [r3, #0]
    task_id5	=    SCH_Add_Task(status_transition_AUTO_GREEN1_RED2, (b+c+1+b+1)*100, (a+b+c+3)*100);
 80003bc:	4b29      	ldr	r3, [pc, #164]	; (8000464 <fsm_automatic_run+0x1b0>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b29      	ldr	r3, [pc, #164]	; (8000468 <fsm_automatic_run+0x1b4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4413      	add	r3, r2
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	4b26      	ldr	r3, [pc, #152]	; (8000464 <fsm_automatic_run+0x1b0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	3301      	adds	r3, #1
 80003d0:	2264      	movs	r2, #100	; 0x64
 80003d2:	fb02 f303 	mul.w	r3, r2, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <fsm_automatic_run+0x1ac>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	4b21      	ldr	r3, [pc, #132]	; (8000464 <fsm_automatic_run+0x1b0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	441a      	add	r2, r3
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <fsm_automatic_run+0x1b4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4413      	add	r3, r2
 80003e8:	3303      	adds	r3, #3
 80003ea:	2264      	movs	r2, #100	; 0x64
 80003ec:	fb02 f303 	mul.w	r3, r2, r3
 80003f0:	461a      	mov	r2, r3
 80003f2:	4828      	ldr	r0, [pc, #160]	; (8000494 <fsm_automatic_run+0x1e0>)
 80003f4:	f001 fef0 	bl	80021d8 <SCH_Add_Task>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b26      	ldr	r3, [pc, #152]	; (8000498 <fsm_automatic_run+0x1e4>)
 80003fe:	601a      	str	r2, [r3, #0]
    task_id6	=    SCH_Add_Task(status_transition_AUTO_YELLOW1_RED2,(b+c+1+b+1+c+1)*100,(a+b+c+3)*100);
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <fsm_automatic_run+0x1b0>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <fsm_automatic_run+0x1b4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4413      	add	r3, r2
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <fsm_automatic_run+0x1b0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4413      	add	r3, r2
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <fsm_automatic_run+0x1b4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4413      	add	r3, r2
 800041a:	3301      	adds	r3, #1
 800041c:	2264      	movs	r2, #100	; 0x64
 800041e:	fb02 f303 	mul.w	r3, r2, r3
 8000422:	4619      	mov	r1, r3
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <fsm_automatic_run+0x1ac>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <fsm_automatic_run+0x1b0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	441a      	add	r2, r3
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <fsm_automatic_run+0x1b4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4413      	add	r3, r2
 8000434:	3303      	adds	r3, #3
 8000436:	2264      	movs	r2, #100	; 0x64
 8000438:	fb02 f303 	mul.w	r3, r2, r3
 800043c:	461a      	mov	r2, r3
 800043e:	4817      	ldr	r0, [pc, #92]	; (800049c <fsm_automatic_run+0x1e8>)
 8000440:	f001 feca 	bl	80021d8 <SCH_Add_Task>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <fsm_automatic_run+0x1ec>)
 800044a:	601a      	str	r2, [r3, #0]
       		}
//               status=AUTO_RED1_GREEN2;
//               setTimer(0, b*1000);
//               setTimer(1, 1000);
//               setTimer(2, 1000);
			break;
 800044c:	e260      	b.n	8000910 <fsm_automatic_run+0x65c>
 800044e:	bf00      	nop
 8000450:	200000ac 	.word	0x200000ac
 8000454:	20000060 	.word	0x20000060
 8000458:	20000064 	.word	0x20000064
 800045c:	2000005c 	.word	0x2000005c
 8000460:	20000050 	.word	0x20000050
 8000464:	20000054 	.word	0x20000054
 8000468:	20000058 	.word	0x20000058
 800046c:	200000b4 	.word	0x200000b4
 8000470:	200000b0 	.word	0x200000b0
 8000474:	08001495 	.word	0x08001495
 8000478:	200000c0 	.word	0x200000c0
 800047c:	08001761 	.word	0x08001761
 8000480:	200000ec 	.word	0x200000ec
 8000484:	08001189 	.word	0x08001189
 8000488:	200000f4 	.word	0x200000f4
 800048c:	0800112d 	.word	0x0800112d
 8000490:	200000d4 	.word	0x200000d4
 8000494:	080010d1 	.word	0x080010d1
 8000498:	200000c4 	.word	0x200000c4
 800049c:	080011e5 	.word	0x080011e5
 80004a0:	200000dc 	.word	0x200000dc
       			counterred=a;
 80004a4:	4bad      	ldr	r3, [pc, #692]	; (800075c <fsm_automatic_run+0x4a8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4aad      	ldr	r2, [pc, #692]	; (8000760 <fsm_automatic_run+0x4ac>)
 80004aa:	6013      	str	r3, [r2, #0]
       			countergreen=b;
 80004ac:	4bad      	ldr	r3, [pc, #692]	; (8000764 <fsm_automatic_run+0x4b0>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4aad      	ldr	r2, [pc, #692]	; (8000768 <fsm_automatic_run+0x4b4>)
 80004b2:	6013      	str	r3, [r2, #0]
       			counteryellow=c;
 80004b4:	4bad      	ldr	r3, [pc, #692]	; (800076c <fsm_automatic_run+0x4b8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4aad      	ldr	r2, [pc, #692]	; (8000770 <fsm_automatic_run+0x4bc>)
 80004ba:	6013      	str	r3, [r2, #0]
       			idx_led13=0;
 80004bc:	4bad      	ldr	r3, [pc, #692]	; (8000774 <fsm_automatic_run+0x4c0>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
       			idx_led02=0;
 80004c2:	4bad      	ldr	r3, [pc, #692]	; (8000778 <fsm_automatic_run+0x4c4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
       			status=AUTO_RED1_GREEN2;
 80004c8:	4bac      	ldr	r3, [pc, #688]	; (800077c <fsm_automatic_run+0x4c8>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	601a      	str	r2, [r3, #0]
       		    task_id1 =  SCH_Add_Task(led7_segment_run02, 50, 100);
 80004ce:	2264      	movs	r2, #100	; 0x64
 80004d0:	2132      	movs	r1, #50	; 0x32
 80004d2:	48ab      	ldr	r0, [pc, #684]	; (8000780 <fsm_automatic_run+0x4cc>)
 80004d4:	f001 fe80 	bl	80021d8 <SCH_Add_Task>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4ba9      	ldr	r3, [pc, #676]	; (8000784 <fsm_automatic_run+0x4d0>)
 80004de:	601a      	str	r2, [r3, #0]
       		    task_id2 =  SCH_Add_Task(led7_segment_run13, 0, 100);
 80004e0:	2264      	movs	r2, #100	; 0x64
 80004e2:	2100      	movs	r1, #0
 80004e4:	48a8      	ldr	r0, [pc, #672]	; (8000788 <fsm_automatic_run+0x4d4>)
 80004e6:	f001 fe77 	bl	80021d8 <SCH_Add_Task>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	4ba7      	ldr	r3, [pc, #668]	; (800078c <fsm_automatic_run+0x4d8>)
 80004f0:	601a      	str	r2, [r3, #0]
       		    task_id3 =  SCH_Add_Task(status_transition_AUTO_RED1_GREEN2, b*100, (b+c+b+1+c+b)*100);
 80004f2:	4b9c      	ldr	r3, [pc, #624]	; (8000764 <fsm_automatic_run+0x4b0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2264      	movs	r2, #100	; 0x64
 80004f8:	fb02 f303 	mul.w	r3, r2, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	4b99      	ldr	r3, [pc, #612]	; (8000764 <fsm_automatic_run+0x4b0>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4b9a      	ldr	r3, [pc, #616]	; (800076c <fsm_automatic_run+0x4b8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	441a      	add	r2, r3
 8000508:	4b96      	ldr	r3, [pc, #600]	; (8000764 <fsm_automatic_run+0x4b0>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4413      	add	r3, r2
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	4b96      	ldr	r3, [pc, #600]	; (800076c <fsm_automatic_run+0x4b8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	441a      	add	r2, r3
 8000516:	4b93      	ldr	r3, [pc, #588]	; (8000764 <fsm_automatic_run+0x4b0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4413      	add	r3, r2
 800051c:	2264      	movs	r2, #100	; 0x64
 800051e:	fb02 f303 	mul.w	r3, r2, r3
 8000522:	461a      	mov	r2, r3
 8000524:	489a      	ldr	r0, [pc, #616]	; (8000790 <fsm_automatic_run+0x4dc>)
 8000526:	f001 fe57 	bl	80021d8 <SCH_Add_Task>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b99      	ldr	r3, [pc, #612]	; (8000794 <fsm_automatic_run+0x4e0>)
 8000530:	601a      	str	r2, [r3, #0]
       		    task_id4 =		SCH_Add_Task(status_transition_AUTO_RED1_YELLOW2, (b+c+1)*100, (b+c+b+1+c+b)*100);
 8000532:	4b8c      	ldr	r3, [pc, #560]	; (8000764 <fsm_automatic_run+0x4b0>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b8d      	ldr	r3, [pc, #564]	; (800076c <fsm_automatic_run+0x4b8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	3301      	adds	r3, #1
 800053e:	2264      	movs	r2, #100	; 0x64
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	4619      	mov	r1, r3
 8000546:	4b87      	ldr	r3, [pc, #540]	; (8000764 <fsm_automatic_run+0x4b0>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b88      	ldr	r3, [pc, #544]	; (800076c <fsm_automatic_run+0x4b8>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	441a      	add	r2, r3
 8000550:	4b84      	ldr	r3, [pc, #528]	; (8000764 <fsm_automatic_run+0x4b0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4413      	add	r3, r2
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	4b84      	ldr	r3, [pc, #528]	; (800076c <fsm_automatic_run+0x4b8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	441a      	add	r2, r3
 800055e:	4b81      	ldr	r3, [pc, #516]	; (8000764 <fsm_automatic_run+0x4b0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	2264      	movs	r2, #100	; 0x64
 8000566:	fb02 f303 	mul.w	r3, r2, r3
 800056a:	461a      	mov	r2, r3
 800056c:	488a      	ldr	r0, [pc, #552]	; (8000798 <fsm_automatic_run+0x4e4>)
 800056e:	f001 fe33 	bl	80021d8 <SCH_Add_Task>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	4b89      	ldr	r3, [pc, #548]	; (800079c <fsm_automatic_run+0x4e8>)
 8000578:	601a      	str	r2, [r3, #0]
       		    task_id5	=    SCH_Add_Task(status_transition_AUTO_GREEN1_RED2, (b+c+1+b+1)*100, (b+c+b+1+c+b)*100);
 800057a:	4b7a      	ldr	r3, [pc, #488]	; (8000764 <fsm_automatic_run+0x4b0>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b7b      	ldr	r3, [pc, #492]	; (800076c <fsm_automatic_run+0x4b8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	4b77      	ldr	r3, [pc, #476]	; (8000764 <fsm_automatic_run+0x4b0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	3301      	adds	r3, #1
 800058e:	2264      	movs	r2, #100	; 0x64
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	4619      	mov	r1, r3
 8000596:	4b73      	ldr	r3, [pc, #460]	; (8000764 <fsm_automatic_run+0x4b0>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b74      	ldr	r3, [pc, #464]	; (800076c <fsm_automatic_run+0x4b8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	441a      	add	r2, r3
 80005a0:	4b70      	ldr	r3, [pc, #448]	; (8000764 <fsm_automatic_run+0x4b0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4413      	add	r3, r2
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	4b70      	ldr	r3, [pc, #448]	; (800076c <fsm_automatic_run+0x4b8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	441a      	add	r2, r3
 80005ae:	4b6d      	ldr	r3, [pc, #436]	; (8000764 <fsm_automatic_run+0x4b0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	2264      	movs	r2, #100	; 0x64
 80005b6:	fb02 f303 	mul.w	r3, r2, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	4878      	ldr	r0, [pc, #480]	; (80007a0 <fsm_automatic_run+0x4ec>)
 80005be:	f001 fe0b 	bl	80021d8 <SCH_Add_Task>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b77      	ldr	r3, [pc, #476]	; (80007a4 <fsm_automatic_run+0x4f0>)
 80005c8:	601a      	str	r2, [r3, #0]
       		    task_id6	=    SCH_Add_Task(status_transition_AUTO_YELLOW1_RED2,(b+c+1+b+1+c+1)*100,(b+c+1+b+1+c+1+b-2)*100);
 80005ca:	4b66      	ldr	r3, [pc, #408]	; (8000764 <fsm_automatic_run+0x4b0>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b67      	ldr	r3, [pc, #412]	; (800076c <fsm_automatic_run+0x4b8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	4b63      	ldr	r3, [pc, #396]	; (8000764 <fsm_automatic_run+0x4b0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	4b63      	ldr	r3, [pc, #396]	; (800076c <fsm_automatic_run+0x4b8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	3301      	adds	r3, #1
 80005e6:	2264      	movs	r2, #100	; 0x64
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	4b5d      	ldr	r3, [pc, #372]	; (8000764 <fsm_automatic_run+0x4b0>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b5e      	ldr	r3, [pc, #376]	; (800076c <fsm_automatic_run+0x4b8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <fsm_automatic_run+0x4b0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	4b5a      	ldr	r3, [pc, #360]	; (800076c <fsm_automatic_run+0x4b8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	4b56      	ldr	r3, [pc, #344]	; (8000764 <fsm_automatic_run+0x4b0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	3b02      	subs	r3, #2
 8000612:	2264      	movs	r2, #100	; 0x64
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	461a      	mov	r2, r3
 800061a:	4863      	ldr	r0, [pc, #396]	; (80007a8 <fsm_automatic_run+0x4f4>)
 800061c:	f001 fddc 	bl	80021d8 <SCH_Add_Task>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b61      	ldr	r3, [pc, #388]	; (80007ac <fsm_automatic_run+0x4f8>)
 8000626:	601a      	str	r2, [r3, #0]
			break;
 8000628:	e172      	b.n	8000910 <fsm_automatic_run+0x65c>
		case AUTO_RED1_GREEN2:
			LED_RED1_GREEN2();
 800062a:	f001 ffed 	bl	8002608 <LED_RED1_GREEN2>
//			//	else setTimer(0, (c+1)*1000);
//	              // setTimer(1, 500);
//	             //  setTimer(2, 1000);
//				//counter=0;
//			}
			if(isButtonPressed(0)==1){
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff fd8c 	bl	800014c <isButtonPressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	f040 8163 	bne.w	8000902 <fsm_automatic_run+0x64e>
		//		 HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
				status=MAN_RED;
 800063c:	4b4f      	ldr	r3, [pc, #316]	; (800077c <fsm_automatic_run+0x4c8>)
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
//				setTimer(3, 500);
			//	setTimer(4, 10000);
			//	checkstatus=4;
       		//    SCH_Add_Task(led7_segment_run02, 0, 0);
       		//    SCH_Add_Task(led7_segment_run13, 0, 0);
				SCH_Delete_Task(task_id1);
 8000642:	4b50      	ldr	r3, [pc, #320]	; (8000784 <fsm_automatic_run+0x4d0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fed0 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id2);
 800064c:	4b4f      	ldr	r3, [pc, #316]	; (800078c <fsm_automatic_run+0x4d8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fecb 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id3);
 8000656:	4b4f      	ldr	r3, [pc, #316]	; (8000794 <fsm_automatic_run+0x4e0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fec6 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id4);
 8000660:	4b4e      	ldr	r3, [pc, #312]	; (800079c <fsm_automatic_run+0x4e8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fec1 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id5);
 800066a:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <fsm_automatic_run+0x4f0>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f001 febc 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id6);
 8000674:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <fsm_automatic_run+0x4f8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f001 feb7 	bl	80023ec <SCH_Delete_Task>
				task_id7=			SCH_Add_Task(Save_led7RED_segment_run02,50,100);
 800067e:	2264      	movs	r2, #100	; 0x64
 8000680:	2132      	movs	r1, #50	; 0x32
 8000682:	484b      	ldr	r0, [pc, #300]	; (80007b0 <fsm_automatic_run+0x4fc>)
 8000684:	f001 fda8 	bl	80021d8 <SCH_Add_Task>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <fsm_automatic_run+0x500>)
 800068e:	601a      	str	r2, [r3, #0]
				task_id8= SCH_Add_Task(Save_led7RED_segment_run13,0,100);
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	2100      	movs	r1, #0
 8000694:	4848      	ldr	r0, [pc, #288]	; (80007b8 <fsm_automatic_run+0x504>)
 8000696:	f001 fd9f 	bl	80021d8 <SCH_Add_Task>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4b47      	ldr	r3, [pc, #284]	; (80007bc <fsm_automatic_run+0x508>)
 80006a0:	601a      	str	r2, [r3, #0]
				task_id9= SCH_Add_Task(LED_RED_TEST, 50, 50);
 80006a2:	2232      	movs	r2, #50	; 0x32
 80006a4:	2132      	movs	r1, #50	; 0x32
 80006a6:	4846      	ldr	r0, [pc, #280]	; (80007c0 <fsm_automatic_run+0x50c>)
 80006a8:	f001 fd96 	bl	80021d8 <SCH_Add_Task>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b44      	ldr	r3, [pc, #272]	; (80007c4 <fsm_automatic_run+0x510>)
 80006b2:	601a      	str	r2, [r3, #0]
				check=0;
 80006b4:	4b44      	ldr	r3, [pc, #272]	; (80007c8 <fsm_automatic_run+0x514>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
				checkcounterred=0;
 80006ba:	4b44      	ldr	r3, [pc, #272]	; (80007cc <fsm_automatic_run+0x518>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
			//	checksavered=0;
			}
			break;
 80006c0:	e11f      	b.n	8000902 <fsm_automatic_run+0x64e>
		case AUTO_RED1_YELLOW2:
			LED_RED1_YELLOW2();
 80006c2:	f001 ffc5 	bl	8002650 <LED_RED1_YELLOW2>
//			//	setTimer(0, (b)*1000);
//	              // counter=0;
//	              // setTimer(1, 500);
//	             //  setTimer(2, 1000);
//			}
			if(isButtonPressed(0)==1){
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff fd40 	bl	800014c <isButtonPressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	f040 8119 	bne.w	8000906 <fsm_automatic_run+0x652>
				status=MAN_RED;
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <fsm_automatic_run+0x4c8>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	601a      	str	r2, [r3, #0]
				SCH_Delete_Task(task_id1);
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <fsm_automatic_run+0x4d0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe84 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id2);
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <fsm_automatic_run+0x4d8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fe7f 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id3);
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <fsm_automatic_run+0x4e0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fe7a 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id4);
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <fsm_automatic_run+0x4e8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fe75 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id5);
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <fsm_automatic_run+0x4f0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fe70 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id6);
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <fsm_automatic_run+0x4f8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fe6b 	bl	80023ec <SCH_Delete_Task>
				task_id7=			SCH_Add_Task(Save_led7RED_segment_run02,50,100);
 8000716:	2264      	movs	r2, #100	; 0x64
 8000718:	2132      	movs	r1, #50	; 0x32
 800071a:	4825      	ldr	r0, [pc, #148]	; (80007b0 <fsm_automatic_run+0x4fc>)
 800071c:	f001 fd5c 	bl	80021d8 <SCH_Add_Task>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <fsm_automatic_run+0x500>)
 8000726:	601a      	str	r2, [r3, #0]
				task_id8= SCH_Add_Task(Save_led7RED_segment_run13,0,100);
 8000728:	2264      	movs	r2, #100	; 0x64
 800072a:	2100      	movs	r1, #0
 800072c:	4822      	ldr	r0, [pc, #136]	; (80007b8 <fsm_automatic_run+0x504>)
 800072e:	f001 fd53 	bl	80021d8 <SCH_Add_Task>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <fsm_automatic_run+0x508>)
 8000738:	601a      	str	r2, [r3, #0]
				task_id9= SCH_Add_Task(LED_RED_TEST, 50, 50);
 800073a:	2232      	movs	r2, #50	; 0x32
 800073c:	2132      	movs	r1, #50	; 0x32
 800073e:	4820      	ldr	r0, [pc, #128]	; (80007c0 <fsm_automatic_run+0x50c>)
 8000740:	f001 fd4a 	bl	80021d8 <SCH_Add_Task>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <fsm_automatic_run+0x510>)
 800074a:	601a      	str	r2, [r3, #0]
//				setTimer(1, 500);
//				setTimer(2, 1000);
//				setTimer(3, 500);
//				setTimer(5, 10000);
				//checkstatus=5;
				check=0;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <fsm_automatic_run+0x514>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
				checkcounterred=0;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <fsm_automatic_run+0x518>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
			}
			break;
 8000758:	e0d5      	b.n	8000906 <fsm_automatic_run+0x652>
 800075a:	bf00      	nop
 800075c:	20000050 	.word	0x20000050
 8000760:	2000005c 	.word	0x2000005c
 8000764:	20000054 	.word	0x20000054
 8000768:	20000060 	.word	0x20000060
 800076c:	20000058 	.word	0x20000058
 8000770:	20000064 	.word	0x20000064
 8000774:	200000b4 	.word	0x200000b4
 8000778:	200000b0 	.word	0x200000b0
 800077c:	200000ac 	.word	0x200000ac
 8000780:	08001495 	.word	0x08001495
 8000784:	200000c0 	.word	0x200000c0
 8000788:	08001761 	.word	0x08001761
 800078c:	200000ec 	.word	0x200000ec
 8000790:	08001189 	.word	0x08001189
 8000794:	200000f4 	.word	0x200000f4
 8000798:	0800112d 	.word	0x0800112d
 800079c:	200000d4 	.word	0x200000d4
 80007a0:	080010d1 	.word	0x080010d1
 80007a4:	200000c4 	.word	0x200000c4
 80007a8:	080011e5 	.word	0x080011e5
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	08001b05 	.word	0x08001b05
 80007b4:	200000d0 	.word	0x200000d0
 80007b8:	08001c25 	.word	0x08001c25
 80007bc:	200000e8 	.word	0x200000e8
 80007c0:	08001f49 	.word	0x08001f49
 80007c4:	200000e4 	.word	0x200000e4
 80007c8:	2000009c 	.word	0x2000009c
 80007cc:	2000010c 	.word	0x2000010c
		case AUTO_GREEN1_RED2:
			LED_GREEN1_RED2();
 80007d0:	f001 ff62 	bl	8002698 <LED_GREEN1_RED2>
//				 setTimer(0, (c+1)*1000);
//	              // setTimer(1, 500);
//	             // setTimer(2, 1000);
//	             //  counter=0;
//			}
			if(isButtonPressed(0)==1){
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff fcb9 	bl	800014c <isButtonPressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	f040 8094 	bne.w	800090a <fsm_automatic_run+0x656>
				status=MAN_RED;
 80007e2:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <fsm_automatic_run+0x660>)
 80007e4:	220c      	movs	r2, #12
 80007e6:	601a      	str	r2, [r3, #0]
				SCH_Delete_Task(task_id1);
 80007e8:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <fsm_automatic_run+0x664>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fdfd 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id2);
 80007f2:	4b4a      	ldr	r3, [pc, #296]	; (800091c <fsm_automatic_run+0x668>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fdf8 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id3);
 80007fc:	4b48      	ldr	r3, [pc, #288]	; (8000920 <fsm_automatic_run+0x66c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fdf3 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id4);
 8000806:	4b47      	ldr	r3, [pc, #284]	; (8000924 <fsm_automatic_run+0x670>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fdee 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id5);
 8000810:	4b45      	ldr	r3, [pc, #276]	; (8000928 <fsm_automatic_run+0x674>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fde9 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id6);
 800081a:	4b44      	ldr	r3, [pc, #272]	; (800092c <fsm_automatic_run+0x678>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fde4 	bl	80023ec <SCH_Delete_Task>
				task_id7=			SCH_Add_Task(Save_led7RED_segment_run02,50,100);
 8000824:	2264      	movs	r2, #100	; 0x64
 8000826:	2132      	movs	r1, #50	; 0x32
 8000828:	4841      	ldr	r0, [pc, #260]	; (8000930 <fsm_automatic_run+0x67c>)
 800082a:	f001 fcd5 	bl	80021d8 <SCH_Add_Task>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <fsm_automatic_run+0x680>)
 8000834:	601a      	str	r2, [r3, #0]
				task_id8= SCH_Add_Task(Save_led7RED_segment_run13,0,100);
 8000836:	2264      	movs	r2, #100	; 0x64
 8000838:	2100      	movs	r1, #0
 800083a:	483f      	ldr	r0, [pc, #252]	; (8000938 <fsm_automatic_run+0x684>)
 800083c:	f001 fccc 	bl	80021d8 <SCH_Add_Task>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	4b3d      	ldr	r3, [pc, #244]	; (800093c <fsm_automatic_run+0x688>)
 8000846:	601a      	str	r2, [r3, #0]
				task_id9= SCH_Add_Task(LED_RED_TEST, 50, 50);
 8000848:	2232      	movs	r2, #50	; 0x32
 800084a:	2132      	movs	r1, #50	; 0x32
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <fsm_automatic_run+0x68c>)
 800084e:	f001 fcc3 	bl	80021d8 <SCH_Add_Task>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <fsm_automatic_run+0x690>)
 8000858:	601a      	str	r2, [r3, #0]
//				setTimer(1, 500);
//				setTimer(2, 1000);
//				setTimer(3, 500);
//				setTimer(6, 10000);
				//checkstatus=6;
				check=0;
 800085a:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <fsm_automatic_run+0x694>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
				checkcounterred=0;
 8000860:	4b3a      	ldr	r3, [pc, #232]	; (800094c <fsm_automatic_run+0x698>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
			}
			break;
 8000866:	e050      	b.n	800090a <fsm_automatic_run+0x656>
//			if(isTimerExpired(0)==1){
//				setTimer(0, c*1000);
//			}
//			break;
		case AUTO_YELLOW1_RED2:
			LED_YELLOW1_RED2();
 8000868:	f001 ff3a 	bl	80026e0 <LED_YELLOW1_RED2>
//	             //  setTimer(1, 500);
//	             //  setTimer(2, 1000);
//	            //   setTimer(1, 500);
//	            //   setTimer(2, 1000);
//			}
			if(isButtonPressed(0)==1){
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff fc6d 	bl	800014c <isButtonPressed>
 8000872:	4603      	mov	r3, r0
 8000874:	2b01      	cmp	r3, #1
 8000876:	d14a      	bne.n	800090e <fsm_automatic_run+0x65a>
				status=MAN_RED;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <fsm_automatic_run+0x660>)
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
				SCH_Delete_Task(task_id1);
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <fsm_automatic_run+0x664>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fdb2 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id2);
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <fsm_automatic_run+0x668>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fdad 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id3);
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <fsm_automatic_run+0x66c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fda8 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id4);
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <fsm_automatic_run+0x670>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fda3 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id5);
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <fsm_automatic_run+0x674>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fd9e 	bl	80023ec <SCH_Delete_Task>
				SCH_Delete_Task(task_id6);
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <fsm_automatic_run+0x678>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fd99 	bl	80023ec <SCH_Delete_Task>
				task_id7=			SCH_Add_Task(Save_led7RED_segment_run02,50,100);
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	2132      	movs	r1, #50	; 0x32
 80008be:	481c      	ldr	r0, [pc, #112]	; (8000930 <fsm_automatic_run+0x67c>)
 80008c0:	f001 fc8a 	bl	80021d8 <SCH_Add_Task>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <fsm_automatic_run+0x680>)
 80008ca:	601a      	str	r2, [r3, #0]
				task_id8= SCH_Add_Task(Save_led7RED_segment_run13,0,100);
 80008cc:	2264      	movs	r2, #100	; 0x64
 80008ce:	2100      	movs	r1, #0
 80008d0:	4819      	ldr	r0, [pc, #100]	; (8000938 <fsm_automatic_run+0x684>)
 80008d2:	f001 fc81 	bl	80021d8 <SCH_Add_Task>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <fsm_automatic_run+0x688>)
 80008dc:	601a      	str	r2, [r3, #0]
				task_id9= SCH_Add_Task(LED_RED_TEST, 50, 50);
 80008de:	2232      	movs	r2, #50	; 0x32
 80008e0:	2132      	movs	r1, #50	; 0x32
 80008e2:	4817      	ldr	r0, [pc, #92]	; (8000940 <fsm_automatic_run+0x68c>)
 80008e4:	f001 fc78 	bl	80021d8 <SCH_Add_Task>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <fsm_automatic_run+0x690>)
 80008ee:	601a      	str	r2, [r3, #0]
//				setTimer(1, 500);
//				setTimer(2, 1000);
//				setTimer(3, 500);
//				setTimer(7, 10000);
				//checkstatus=7;
				check=0;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <fsm_automatic_run+0x694>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
				checkcounterred=0;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <fsm_automatic_run+0x698>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
			}
			break;
 80008fc:	e007      	b.n	800090e <fsm_automatic_run+0x65a>
		default:
			break;
 80008fe:	bf00      	nop
 8000900:	e006      	b.n	8000910 <fsm_automatic_run+0x65c>
			break;
 8000902:	bf00      	nop
 8000904:	e004      	b.n	8000910 <fsm_automatic_run+0x65c>
			break;
 8000906:	bf00      	nop
 8000908:	e002      	b.n	8000910 <fsm_automatic_run+0x65c>
			break;
 800090a:	bf00      	nop
 800090c:	e000      	b.n	8000910 <fsm_automatic_run+0x65c>
			break;
 800090e:	bf00      	nop
	}
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000ac 	.word	0x200000ac
 8000918:	200000c0 	.word	0x200000c0
 800091c:	200000ec 	.word	0x200000ec
 8000920:	200000f4 	.word	0x200000f4
 8000924:	200000d4 	.word	0x200000d4
 8000928:	200000c4 	.word	0x200000c4
 800092c:	200000dc 	.word	0x200000dc
 8000930:	08001b05 	.word	0x08001b05
 8000934:	200000d0 	.word	0x200000d0
 8000938:	08001c25 	.word	0x08001c25
 800093c:	200000e8 	.word	0x200000e8
 8000940:	08001f49 	.word	0x08001f49
 8000944:	200000e4 	.word	0x200000e4
 8000948:	2000009c 	.word	0x2000009c
 800094c:	2000010c 	.word	0x2000010c

08000950 <fsm_manual_run>:
#include "fsm_manual.h"
#include "global.h"

//int check=0;

void fsm_manual_run(){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	switch(status){
 8000954:	4b7a      	ldr	r3, [pc, #488]	; (8000b40 <fsm_manual_run+0x1f0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b0e      	cmp	r3, #14
 800095a:	f000 80b5 	beq.w	8000ac8 <fsm_manual_run+0x178>
 800095e:	2b0e      	cmp	r3, #14
 8000960:	f300 80e6 	bgt.w	8000b30 <fsm_manual_run+0x1e0>
 8000964:	2b0c      	cmp	r3, #12
 8000966:	d002      	beq.n	800096e <fsm_manual_run+0x1e>
 8000968:	2b0d      	cmp	r3, #13
 800096a:	d058      	beq.n	8000a1e <fsm_manual_run+0xce>
//            setTimer(1, 1000);
//            setTimer(2, 1000);
//		}
//		break;
	default:
		break;
 800096c:	e0e0      	b.n	8000b30 <fsm_manual_run+0x1e0>
		if(check==0){
 800096e:	4b75      	ldr	r3, [pc, #468]	; (8000b44 <fsm_manual_run+0x1f4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d106      	bne.n	8000984 <fsm_manual_run+0x34>
			Turn_On_All_LED_RED();
 8000976:	f001 fe05 	bl	8002584 <Turn_On_All_LED_RED>
			Save_led7RED_segment_run13();
 800097a:	f001 f953 	bl	8001c24 <Save_led7RED_segment_run13>
			check=1;
 800097e:	4b71      	ldr	r3, [pc, #452]	; (8000b44 <fsm_manual_run+0x1f4>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(0)==1){
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fbe1 	bl	800014c <isButtonPressed>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d136      	bne.n	80009fe <fsm_manual_run+0xae>
			status= MAN_GREEN;
 8000990:	4b6b      	ldr	r3, [pc, #428]	; (8000b40 <fsm_manual_run+0x1f0>)
 8000992:	220d      	movs	r2, #13
 8000994:	601a      	str	r2, [r3, #0]
			check=0;
 8000996:	4b6b      	ldr	r3, [pc, #428]	; (8000b44 <fsm_manual_run+0x1f4>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
			counterred=a;
 800099c:	4b6a      	ldr	r3, [pc, #424]	; (8000b48 <fsm_manual_run+0x1f8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a6a      	ldr	r2, [pc, #424]	; (8000b4c <fsm_manual_run+0x1fc>)
 80009a2:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(task_id7);
 80009a4:	4b6a      	ldr	r3, [pc, #424]	; (8000b50 <fsm_manual_run+0x200>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fd1f 	bl	80023ec <SCH_Delete_Task>
			SCH_Delete_Task(task_id8);
 80009ae:	4b69      	ldr	r3, [pc, #420]	; (8000b54 <fsm_manual_run+0x204>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fd1a 	bl	80023ec <SCH_Delete_Task>
			SCH_Delete_Task(task_id9);
 80009b8:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <fsm_manual_run+0x208>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fd15 	bl	80023ec <SCH_Delete_Task>
			task_id10= SCH_Add_Task(Save_led7GREEN_segment_run02,50,100);
 80009c2:	2264      	movs	r2, #100	; 0x64
 80009c4:	2132      	movs	r1, #50	; 0x32
 80009c6:	4865      	ldr	r0, [pc, #404]	; (8000b5c <fsm_manual_run+0x20c>)
 80009c8:	f001 fc06 	bl	80021d8 <SCH_Add_Task>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b63      	ldr	r3, [pc, #396]	; (8000b60 <fsm_manual_run+0x210>)
 80009d2:	601a      	str	r2, [r3, #0]
			task_id11= SCH_Add_Task(Save_led7GREEN_segment_run13,0,100);
 80009d4:	2264      	movs	r2, #100	; 0x64
 80009d6:	2100      	movs	r1, #0
 80009d8:	4862      	ldr	r0, [pc, #392]	; (8000b64 <fsm_manual_run+0x214>)
 80009da:	f001 fbfd 	bl	80021d8 <SCH_Add_Task>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <fsm_manual_run+0x218>)
 80009e4:	601a      	str	r2, [r3, #0]
			task_id12= SCH_Add_Task(LED_GREEN_TEST, 50, 50);
 80009e6:	2232      	movs	r2, #50	; 0x32
 80009e8:	2132      	movs	r1, #50	; 0x32
 80009ea:	4860      	ldr	r0, [pc, #384]	; (8000b6c <fsm_manual_run+0x21c>)
 80009ec:	f001 fbf4 	bl	80021d8 <SCH_Add_Task>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b5e      	ldr	r3, [pc, #376]	; (8000b70 <fsm_manual_run+0x220>)
 80009f6:	601a      	str	r2, [r3, #0]
			checkcountergreen=0;
 80009f8:	4b5e      	ldr	r3, [pc, #376]	; (8000b74 <fsm_manual_run+0x224>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1)==1){
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fba4 	bl	800014c <isButtonPressed>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d105      	bne.n	8000a16 <fsm_manual_run+0xc6>
			status=INCREASE_VALUE_LED_RED;
 8000a0a:	4b4d      	ldr	r3, [pc, #308]	; (8000b40 <fsm_manual_run+0x1f0>)
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	601a      	str	r2, [r3, #0]
		    checksavered=0;
 8000a10:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <fsm_manual_run+0x228>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2)==1){
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff fb98 	bl	800014c <isButtonPressed>
		break;
 8000a1c:	e08d      	b.n	8000b3a <fsm_manual_run+0x1ea>
		if(check==0){
 8000a1e:	4b49      	ldr	r3, [pc, #292]	; (8000b44 <fsm_manual_run+0x1f4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d106      	bne.n	8000a34 <fsm_manual_run+0xe4>
			Turn_On_All_LED_GREEN();
 8000a26:	f001 fdc3 	bl	80025b0 <Turn_On_All_LED_GREEN>
			Save_led7GREEN_segment_run13();
 8000a2a:	f001 f981 	bl	8001d30 <Save_led7GREEN_segment_run13>
			check=1;
 8000a2e:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <fsm_manual_run+0x1f4>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(0)==1){
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fb89 	bl	800014c <isButtonPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d136      	bne.n	8000aae <fsm_manual_run+0x15e>
			status= MAN_YELLOW;
 8000a40:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <fsm_manual_run+0x1f0>)
 8000a42:	220e      	movs	r2, #14
 8000a44:	601a      	str	r2, [r3, #0]
			check=0;
 8000a46:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <fsm_manual_run+0x1f4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
			checkcounteryellow=0;
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <fsm_manual_run+0x22c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
			countergreen=b;
 8000a52:	4b4b      	ldr	r3, [pc, #300]	; (8000b80 <fsm_manual_run+0x230>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a4b      	ldr	r2, [pc, #300]	; (8000b84 <fsm_manual_run+0x234>)
 8000a58:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(task_id10);
 8000a5a:	4b41      	ldr	r3, [pc, #260]	; (8000b60 <fsm_manual_run+0x210>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fcc4 	bl	80023ec <SCH_Delete_Task>
			SCH_Delete_Task(task_id11);
 8000a64:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <fsm_manual_run+0x218>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fcbf 	bl	80023ec <SCH_Delete_Task>
			SCH_Delete_Task(task_id12);
 8000a6e:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <fsm_manual_run+0x220>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fcba 	bl	80023ec <SCH_Delete_Task>
			task_id13= SCH_Add_Task(Save_led7YELLOW_segment_run02,50,100);
 8000a78:	2264      	movs	r2, #100	; 0x64
 8000a7a:	2132      	movs	r1, #50	; 0x32
 8000a7c:	4842      	ldr	r0, [pc, #264]	; (8000b88 <fsm_manual_run+0x238>)
 8000a7e:	f001 fbab 	bl	80021d8 <SCH_Add_Task>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <fsm_manual_run+0x23c>)
 8000a88:	601a      	str	r2, [r3, #0]
			task_id14= SCH_Add_Task(Save_led7YELLOW_segment_run13,0,100);
 8000a8a:	2264      	movs	r2, #100	; 0x64
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4840      	ldr	r0, [pc, #256]	; (8000b90 <fsm_manual_run+0x240>)
 8000a90:	f001 fba2 	bl	80021d8 <SCH_Add_Task>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <fsm_manual_run+0x244>)
 8000a9a:	601a      	str	r2, [r3, #0]
			task_id15= SCH_Add_Task(LED_YELLOW_TEST, 50, 50);
 8000a9c:	2232      	movs	r2, #50	; 0x32
 8000a9e:	2132      	movs	r1, #50	; 0x32
 8000aa0:	483d      	ldr	r0, [pc, #244]	; (8000b98 <fsm_manual_run+0x248>)
 8000aa2:	f001 fb99 	bl	80021d8 <SCH_Add_Task>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <fsm_manual_run+0x24c>)
 8000aac:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1)==1){
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff fb4c 	bl	800014c <isButtonPressed>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d13c      	bne.n	8000b34 <fsm_manual_run+0x1e4>
			status=INCREASE_VALUE_LED_GREEN;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <fsm_manual_run+0x1f0>)
 8000abc:	2212      	movs	r2, #18
 8000abe:	601a      	str	r2, [r3, #0]
			checksavegreen=0;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <fsm_manual_run+0x250>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
		break;
 8000ac6:	e035      	b.n	8000b34 <fsm_manual_run+0x1e4>
		if(check==0){
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <fsm_manual_run+0x1f4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d106      	bne.n	8000ade <fsm_manual_run+0x18e>
			Turn_On_All_LED_YELLOW();
 8000ad0:	f001 fd84 	bl	80025dc <Turn_On_All_LED_YELLOW>
			Save_led7YELLOW_segment_run13();
 8000ad4:	f001 f9b2 	bl	8001e3c <Save_led7YELLOW_segment_run13>
			check=1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <fsm_manual_run+0x1f4>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(0)==1){
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fb34 	bl	800014c <isButtonPressed>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d115      	bne.n	8000b16 <fsm_manual_run+0x1c6>
			counteryellow=c;
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <fsm_manual_run+0x254>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a2e      	ldr	r2, [pc, #184]	; (8000ba8 <fsm_manual_run+0x258>)
 8000af0:	6013      	str	r3, [r2, #0]
			status=INIT;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <fsm_manual_run+0x1f0>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
			SCH_Delete_Task(task_id13);
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <fsm_manual_run+0x23c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fc75 	bl	80023ec <SCH_Delete_Task>
			SCH_Delete_Task(task_id14);
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <fsm_manual_run+0x244>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fc70 	bl	80023ec <SCH_Delete_Task>
			SCH_Delete_Task(task_id15);
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <fsm_manual_run+0x24c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fc6b 	bl	80023ec <SCH_Delete_Task>
		if(isButtonPressed(1)==1){
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fb18 	bl	800014c <isButtonPressed>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10a      	bne.n	8000b38 <fsm_manual_run+0x1e8>
			status=INCREASE_VALUE_LED_YELLOW;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <fsm_manual_run+0x1f0>)
 8000b24:	2214      	movs	r2, #20
 8000b26:	601a      	str	r2, [r3, #0]
		    checksaveyellow=0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <fsm_manual_run+0x25c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
		break;
 8000b2e:	e003      	b.n	8000b38 <fsm_manual_run+0x1e8>
		break;
 8000b30:	bf00      	nop
 8000b32:	e002      	b.n	8000b3a <fsm_manual_run+0x1ea>
		break;
 8000b34:	bf00      	nop
 8000b36:	e000      	b.n	8000b3a <fsm_manual_run+0x1ea>
		break;
 8000b38:	bf00      	nop
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000ac 	.word	0x200000ac
 8000b44:	2000009c 	.word	0x2000009c
 8000b48:	20000050 	.word	0x20000050
 8000b4c:	2000005c 	.word	0x2000005c
 8000b50:	200000d0 	.word	0x200000d0
 8000b54:	200000e8 	.word	0x200000e8
 8000b58:	200000e4 	.word	0x200000e4
 8000b5c:	08001b65 	.word	0x08001b65
 8000b60:	200000cc 	.word	0x200000cc
 8000b64:	08001d31 	.word	0x08001d31
 8000b68:	200000c8 	.word	0x200000c8
 8000b6c:	08001f5d 	.word	0x08001f5d
 8000b70:	200000d8 	.word	0x200000d8
 8000b74:	20000104 	.word	0x20000104
 8000b78:	200000a0 	.word	0x200000a0
 8000b7c:	200000bc 	.word	0x200000bc
 8000b80:	20000054 	.word	0x20000054
 8000b84:	20000060 	.word	0x20000060
 8000b88:	08001bc5 	.word	0x08001bc5
 8000b8c:	200000f0 	.word	0x200000f0
 8000b90:	08001e3d 	.word	0x08001e3d
 8000b94:	200000f8 	.word	0x200000f8
 8000b98:	08001f71 	.word	0x08001f71
 8000b9c:	200000e0 	.word	0x200000e0
 8000ba0:	200000a4 	.word	0x200000a4
 8000ba4:	20000058 	.word	0x20000058
 8000ba8:	20000064 	.word	0x20000064
 8000bac:	200000a8 	.word	0x200000a8

08000bb0 <fsm_setting_run>:
 */

#include "fsm_setting.h"

//int checksavered=0;
void fsm_setting_run(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
      switch(status){
 8000bb4:	4ba2      	ldr	r3, [pc, #648]	; (8000e40 <fsm_setting_run+0x290>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b0f      	subs	r3, #15
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	f200 8250 	bhi.w	8001060 <fsm_setting_run+0x4b0>
 8000bc0:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <fsm_setting_run+0x18>)
 8000bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc6:	bf00      	nop
 8000bc8:	08000be5 	.word	0x08000be5
 8000bcc:	08000cb9 	.word	0x08000cb9
 8000bd0:	08001061 	.word	0x08001061
 8000bd4:	08000d6d 	.word	0x08000d6d
 8000bd8:	08000ead 	.word	0x08000ead
 8000bdc:	08000f61 	.word	0x08000f61
 8000be0:	08000ff1 	.word	0x08000ff1
		  case INCREASE_VALUE_LED_RED:
//			  	Increase_Save_led7RED_segment_run13();
			//  SCH_Dispatch_Tasks();
				if(checksavered==0){
 8000be4:	4b97      	ldr	r3, [pc, #604]	; (8000e44 <fsm_setting_run+0x294>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d108      	bne.n	8000bfe <fsm_setting_run+0x4e>
				//	Save_led7RED_segment_run13();
					Turn_On_All_LED_RED();
 8000bec:	f001 fcca 	bl	8002584 <Turn_On_All_LED_RED>
					Increase_Save_led7RED_segment_run13();
 8000bf0:	f001 f85c 	bl	8001cac <Increase_Save_led7RED_segment_run13>
					++checksavered;
 8000bf4:	4b93      	ldr	r3, [pc, #588]	; (8000e44 <fsm_setting_run+0x294>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a92      	ldr	r2, [pc, #584]	; (8000e44 <fsm_setting_run+0x294>)
 8000bfc:	6013      	str	r3, [r2, #0]
//					setTimer(0, counteryellow13*1000);
//		               setTimer(1, 443);
//		               setTimer(2, 1000);
//				}

				if(isButtonPressed(0)==1){
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff faa4 	bl	800014c <isButtonPressed>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d136      	bne.n	8000c78 <fsm_setting_run+0xc8>
					status= MAN_GREEN;
 8000c0a:	4b8d      	ldr	r3, [pc, #564]	; (8000e40 <fsm_setting_run+0x290>)
 8000c0c:	220d      	movs	r2, #13
 8000c0e:	601a      	str	r2, [r3, #0]
					check=0;
 8000c10:	4b8d      	ldr	r3, [pc, #564]	; (8000e48 <fsm_setting_run+0x298>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
					checkcountergreen=0;
 8000c16:	4b8d      	ldr	r3, [pc, #564]	; (8000e4c <fsm_setting_run+0x29c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
				//	checksavegreen=0;
					counterred=a;
 8000c1c:	4b8c      	ldr	r3, [pc, #560]	; (8000e50 <fsm_setting_run+0x2a0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a8c      	ldr	r2, [pc, #560]	; (8000e54 <fsm_setting_run+0x2a4>)
 8000c22:	6013      	str	r3, [r2, #0]
//					clear_timer_flag(3);
//					setTimer(1, 500);
//					setTimer(2, 1000);
//					setTimer(3, 500);
//					setTimer(4, 10000);
					SCH_Delete_Task(task_id7);
 8000c24:	4b8c      	ldr	r3, [pc, #560]	; (8000e58 <fsm_setting_run+0x2a8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fbdf 	bl	80023ec <SCH_Delete_Task>
					SCH_Delete_Task(task_id8);
 8000c2e:	4b8b      	ldr	r3, [pc, #556]	; (8000e5c <fsm_setting_run+0x2ac>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fbda 	bl	80023ec <SCH_Delete_Task>
					SCH_Delete_Task(task_id9);
 8000c38:	4b89      	ldr	r3, [pc, #548]	; (8000e60 <fsm_setting_run+0x2b0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fbd5 	bl	80023ec <SCH_Delete_Task>
					task_id10= SCH_Add_Task(Save_led7GREEN_segment_run02,50,100);
 8000c42:	2264      	movs	r2, #100	; 0x64
 8000c44:	2132      	movs	r1, #50	; 0x32
 8000c46:	4887      	ldr	r0, [pc, #540]	; (8000e64 <fsm_setting_run+0x2b4>)
 8000c48:	f001 fac6 	bl	80021d8 <SCH_Add_Task>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b85      	ldr	r3, [pc, #532]	; (8000e68 <fsm_setting_run+0x2b8>)
 8000c52:	601a      	str	r2, [r3, #0]
					task_id11= SCH_Add_Task(Save_led7GREEN_segment_run13,0,100);
 8000c54:	2264      	movs	r2, #100	; 0x64
 8000c56:	2100      	movs	r1, #0
 8000c58:	4884      	ldr	r0, [pc, #528]	; (8000e6c <fsm_setting_run+0x2bc>)
 8000c5a:	f001 fabd 	bl	80021d8 <SCH_Add_Task>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b83      	ldr	r3, [pc, #524]	; (8000e70 <fsm_setting_run+0x2c0>)
 8000c64:	601a      	str	r2, [r3, #0]
					task_id12= SCH_Add_Task(LED_GREEN_TEST, 50, 50);
 8000c66:	2232      	movs	r2, #50	; 0x32
 8000c68:	2132      	movs	r1, #50	; 0x32
 8000c6a:	4882      	ldr	r0, [pc, #520]	; (8000e74 <fsm_setting_run+0x2c4>)
 8000c6c:	f001 fab4 	bl	80021d8 <SCH_Add_Task>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b80      	ldr	r3, [pc, #512]	; (8000e78 <fsm_setting_run+0x2c8>)
 8000c76:	601a      	str	r2, [r3, #0]
				}
				if(isButtonPressed(1)==1){
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fa67 	bl	800014c <isButtonPressed>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d106      	bne.n	8000c92 <fsm_setting_run+0xe2>
					++checksavered;
 8000c84:	4b6f      	ldr	r3, [pc, #444]	; (8000e44 <fsm_setting_run+0x294>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a6e      	ldr	r2, [pc, #440]	; (8000e44 <fsm_setting_run+0x294>)
 8000c8c:	6013      	str	r3, [r2, #0]
				    Increase_Save_led7RED_segment_run13();
 8000c8e:	f001 f80d 	bl	8001cac <Increase_Save_led7RED_segment_run13>
//					setTimer(1, 500);
//					setTimer(2, 1000);
//					setTimer(3, 500);
				 //   setTimer(checkstatus, 10000);
				}
				if(isButtonPressed(2)==1){
 8000c92:	2002      	movs	r0, #2
 8000c94:	f7ff fa5a 	bl	800014c <isButtonPressed>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	f040 81e2 	bne.w	8001064 <fsm_setting_run+0x4b4>
					status=SET_VALUE_LED_RED;
 8000ca0:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <fsm_setting_run+0x290>)
 8000ca2:	2210      	movs	r2, #16
 8000ca4:	601a      	str	r2, [r3, #0]
					checksavered=0;
 8000ca6:	4b67      	ldr	r3, [pc, #412]	; (8000e44 <fsm_setting_run+0x294>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
					SCH_Delete_Task(task_id9);
 8000cac:	4b6c      	ldr	r3, [pc, #432]	; (8000e60 <fsm_setting_run+0x2b0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fb9b 	bl	80023ec <SCH_Delete_Task>
//					  a=counterred13;
//					  b=countergreen13;
//					  c=counteryellow13;
				}

			  break;
 8000cb6:	e1d5      	b.n	8001064 <fsm_setting_run+0x4b4>
		  case SET_VALUE_LED_RED:
			//  SCH_Dispatch_Tasks();
			  Turn_On_All_LED_RED();
 8000cb8:	f001 fc64 	bl	8002584 <Turn_On_All_LED_RED>
			  counterred = savecounterred13;
 8000cbc:	4b6f      	ldr	r3, [pc, #444]	; (8000e7c <fsm_setting_run+0x2cc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a64      	ldr	r2, [pc, #400]	; (8000e54 <fsm_setting_run+0x2a4>)
 8000cc2:	6013      	str	r3, [r2, #0]
			// counteryellow13=counterred13-countergreen13;
			//  savecountergreen13=countergreen13;
			//  a=counterred13;
			//  b=countergreen13;
			//  c=counteryellow13;
				if(checksavered==0){
 8000cc4:	4b5f      	ldr	r3, [pc, #380]	; (8000e44 <fsm_setting_run+0x294>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d104      	bne.n	8000cd6 <fsm_setting_run+0x126>
					Save_led7RED_segment_run13();
 8000ccc:	f000 ffaa 	bl	8001c24 <Save_led7RED_segment_run13>
					//Increase_Save_led7RED_segment_run13();
					checksavered=1;
 8000cd0:	4b5c      	ldr	r3, [pc, #368]	; (8000e44 <fsm_setting_run+0x294>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
//					setTimer(2, 1000);
//					setTimer(3, 500);
//					setTimer(checkstatus, 10000);
//					checkcountergreen=1;
//				}
				if(isButtonPressed(0)==1){
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fa38 	bl	800014c <isButtonPressed>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d12d      	bne.n	8000d3e <fsm_setting_run+0x18e>
					status= MAN_GREEN;
 8000ce2:	4b57      	ldr	r3, [pc, #348]	; (8000e40 <fsm_setting_run+0x290>)
 8000ce4:	220d      	movs	r2, #13
 8000ce6:	601a      	str	r2, [r3, #0]
					check=0;
 8000ce8:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <fsm_setting_run+0x298>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
					checkcountergreen=0;
 8000cee:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <fsm_setting_run+0x29c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
//					clear_timer_flag(3);
//					setTimer(1, 500);
//					setTimer(2, 1000);
//					setTimer(3, 500);
				//	setTimer(4, 10000);
					SCH_Delete_Task(task_id7);
 8000cf4:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <fsm_setting_run+0x2a8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 fb77 	bl	80023ec <SCH_Delete_Task>
					SCH_Delete_Task(task_id8);
 8000cfe:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <fsm_setting_run+0x2ac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fb72 	bl	80023ec <SCH_Delete_Task>
					task_id10= SCH_Add_Task(Save_led7GREEN_segment_run02,50,100);
 8000d08:	2264      	movs	r2, #100	; 0x64
 8000d0a:	2132      	movs	r1, #50	; 0x32
 8000d0c:	4855      	ldr	r0, [pc, #340]	; (8000e64 <fsm_setting_run+0x2b4>)
 8000d0e:	f001 fa63 	bl	80021d8 <SCH_Add_Task>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b54      	ldr	r3, [pc, #336]	; (8000e68 <fsm_setting_run+0x2b8>)
 8000d18:	601a      	str	r2, [r3, #0]
					task_id11= SCH_Add_Task(Save_led7GREEN_segment_run13,0,100);
 8000d1a:	2264      	movs	r2, #100	; 0x64
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4853      	ldr	r0, [pc, #332]	; (8000e6c <fsm_setting_run+0x2bc>)
 8000d20:	f001 fa5a 	bl	80021d8 <SCH_Add_Task>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <fsm_setting_run+0x2c0>)
 8000d2a:	601a      	str	r2, [r3, #0]
					task_id12= SCH_Add_Task(LED_GREEN_TEST, 50, 50);
 8000d2c:	2232      	movs	r2, #50	; 0x32
 8000d2e:	2132      	movs	r1, #50	; 0x32
 8000d30:	4850      	ldr	r0, [pc, #320]	; (8000e74 <fsm_setting_run+0x2c4>)
 8000d32:	f001 fa51 	bl	80021d8 <SCH_Add_Task>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b4f      	ldr	r3, [pc, #316]	; (8000e78 <fsm_setting_run+0x2c8>)
 8000d3c:	601a      	str	r2, [r3, #0]
				}
				if(isButtonPressed(1)==1){
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff fa04 	bl	800014c <isButtonPressed>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	f040 818e 	bne.w	8001068 <fsm_setting_run+0x4b8>
					status=INCREASE_VALUE_LED_RED;
 8000d4c:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <fsm_setting_run+0x290>)
 8000d4e:	220f      	movs	r2, #15
 8000d50:	601a      	str	r2, [r3, #0]
					//Increase_Save_led7RED_segment_run13();
					checksavered=0;
 8000d52:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <fsm_setting_run+0x294>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
					task_id9= SCH_Add_Task(LED_RED_TEST, 50, 50);
 8000d58:	2232      	movs	r2, #50	; 0x32
 8000d5a:	2132      	movs	r1, #50	; 0x32
 8000d5c:	4848      	ldr	r0, [pc, #288]	; (8000e80 <fsm_setting_run+0x2d0>)
 8000d5e:	f001 fa3b 	bl	80021d8 <SCH_Add_Task>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <fsm_setting_run+0x2b0>)
 8000d68:	601a      	str	r2, [r3, #0]
////					setTimer(0, b*1000);
////		            setTimer(1, 443);
////		            setTimer(2, 1000);
//				}

			  break;
 8000d6a:	e17d      	b.n	8001068 <fsm_setting_run+0x4b8>
		  case INCREASE_VALUE_LED_GREEN:
			//  SCH_Dispatch_Tasks();
				if(checksavegreen==0){
 8000d6c:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <fsm_setting_run+0x2d4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d108      	bne.n	8000d86 <fsm_setting_run+0x1d6>
					Turn_On_All_LED_GREEN();
 8000d74:	f001 fc1c 	bl	80025b0 <Turn_On_All_LED_GREEN>
					Increase_Save_led7GREEN_segment_run13();
 8000d78:	f001 f81e 	bl	8001db8 <Increase_Save_led7GREEN_segment_run13>
					++checksavegreen;
 8000d7c:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <fsm_setting_run+0x2d4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <fsm_setting_run+0x2d4>)
 8000d84:	6013      	str	r3, [r2, #0]
//				}
//				if(isTimerExpired(3)==1){
//					HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin);
//					setTimer(3, 500);
//				}
				if(isButtonPressed(0)==1){
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff f9e0 	bl	800014c <isButtonPressed>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d136      	bne.n	8000e00 <fsm_setting_run+0x250>
					status= MAN_YELLOW;
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <fsm_setting_run+0x290>)
 8000d94:	220e      	movs	r2, #14
 8000d96:	601a      	str	r2, [r3, #0]
					check=0;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <fsm_setting_run+0x298>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
					checkcounteryellow=0;
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <fsm_setting_run+0x2d8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
				//	checksaveyellow=0;
					countergreen=b;
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <fsm_setting_run+0x2dc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a39      	ldr	r2, [pc, #228]	; (8000e90 <fsm_setting_run+0x2e0>)
 8000daa:	6013      	str	r3, [r2, #0]
//					clear_timer_flag(3);
//					setTimer(1, 500);
//					setTimer(2, 1000);
//					setTimer(3, 500);
//					setTimer(4, 10000);
					SCH_Delete_Task(task_id10);
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <fsm_setting_run+0x2b8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fb1b 	bl	80023ec <SCH_Delete_Task>
					SCH_Delete_Task(task_id11);
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <fsm_setting_run+0x2c0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fb16 	bl	80023ec <SCH_Delete_Task>
					SCH_Delete_Task(task_id12);
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <fsm_setting_run+0x2c8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fb11 	bl	80023ec <SCH_Delete_Task>
					task_id13= SCH_Add_Task(Save_led7YELLOW_segment_run02,50,100);
 8000dca:	2264      	movs	r2, #100	; 0x64
 8000dcc:	2132      	movs	r1, #50	; 0x32
 8000dce:	4831      	ldr	r0, [pc, #196]	; (8000e94 <fsm_setting_run+0x2e4>)
 8000dd0:	f001 fa02 	bl	80021d8 <SCH_Add_Task>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <fsm_setting_run+0x2e8>)
 8000dda:	601a      	str	r2, [r3, #0]
					task_id14= SCH_Add_Task(Save_led7YELLOW_segment_run13,0,100);
 8000ddc:	2264      	movs	r2, #100	; 0x64
 8000dde:	2100      	movs	r1, #0
 8000de0:	482e      	ldr	r0, [pc, #184]	; (8000e9c <fsm_setting_run+0x2ec>)
 8000de2:	f001 f9f9 	bl	80021d8 <SCH_Add_Task>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <fsm_setting_run+0x2f0>)
 8000dec:	601a      	str	r2, [r3, #0]
					task_id15= SCH_Add_Task(LED_YELLOW_TEST, 50, 50);
 8000dee:	2232      	movs	r2, #50	; 0x32
 8000df0:	2132      	movs	r1, #50	; 0x32
 8000df2:	482c      	ldr	r0, [pc, #176]	; (8000ea4 <fsm_setting_run+0x2f4>)
 8000df4:	f001 f9f0 	bl	80021d8 <SCH_Add_Task>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <fsm_setting_run+0x2f8>)
 8000dfe:	601a      	str	r2, [r3, #0]

				}
				if(isButtonPressed(1)==1){
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff f9a3 	bl	800014c <isButtonPressed>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d106      	bne.n	8000e1a <fsm_setting_run+0x26a>
					++checksavegreen;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <fsm_setting_run+0x2d4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <fsm_setting_run+0x2d4>)
 8000e14:	6013      	str	r3, [r2, #0]
				    Increase_Save_led7GREEN_segment_run13();
 8000e16:	f000 ffcf 	bl	8001db8 <Increase_Save_led7GREEN_segment_run13>
//					clear_timer_flag(3);
//					setTimer(1, 500);
//					setTimer(2, 1000);
//					setTimer(3, 500);
				}
				if(isButtonPressed(2)==1){
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff f996 	bl	800014c <isButtonPressed>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	f040 8122 	bne.w	800106c <fsm_setting_run+0x4bc>
					status=SET_VALUE_LED_GREEN;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <fsm_setting_run+0x290>)
 8000e2a:	2213      	movs	r2, #19
 8000e2c:	601a      	str	r2, [r3, #0]
					checksavegreen=0;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <fsm_setting_run+0x2d4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
					SCH_Delete_Task(task_id12);
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <fsm_setting_run+0x2c8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fad7 	bl	80023ec <SCH_Delete_Task>
//					clear_timer_flag(1);
//					clear_timer_flag(2);
//					setTimer(1, 500);
//					setTimer(2, 1000);
				}
			  break;
 8000e3e:	e115      	b.n	800106c <fsm_setting_run+0x4bc>
 8000e40:	200000ac 	.word	0x200000ac
 8000e44:	200000a0 	.word	0x200000a0
 8000e48:	2000009c 	.word	0x2000009c
 8000e4c:	20000104 	.word	0x20000104
 8000e50:	20000050 	.word	0x20000050
 8000e54:	2000005c 	.word	0x2000005c
 8000e58:	200000d0 	.word	0x200000d0
 8000e5c:	200000e8 	.word	0x200000e8
 8000e60:	200000e4 	.word	0x200000e4
 8000e64:	08001b65 	.word	0x08001b65
 8000e68:	200000cc 	.word	0x200000cc
 8000e6c:	08001d31 	.word	0x08001d31
 8000e70:	200000c8 	.word	0x200000c8
 8000e74:	08001f5d 	.word	0x08001f5d
 8000e78:	200000d8 	.word	0x200000d8
 8000e7c:	20000110 	.word	0x20000110
 8000e80:	08001f49 	.word	0x08001f49
 8000e84:	200000a4 	.word	0x200000a4
 8000e88:	200000bc 	.word	0x200000bc
 8000e8c:	20000054 	.word	0x20000054
 8000e90:	20000060 	.word	0x20000060
 8000e94:	08001bc5 	.word	0x08001bc5
 8000e98:	200000f0 	.word	0x200000f0
 8000e9c:	08001e3d 	.word	0x08001e3d
 8000ea0:	200000f8 	.word	0x200000f8
 8000ea4:	08001f71 	.word	0x08001f71
 8000ea8:	200000e0 	.word	0x200000e0
		  case SET_VALUE_LED_GREEN:
			//  SCH_Dispatch_Tasks();
                      Turn_On_All_LED_GREEN();
 8000eac:	f001 fb80 	bl	80025b0 <Turn_On_All_LED_GREEN>
		  			  countergreen = savecountergreen13;
 8000eb0:	4b73      	ldr	r3, [pc, #460]	; (8001080 <fsm_setting_run+0x4d0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a73      	ldr	r2, [pc, #460]	; (8001084 <fsm_setting_run+0x4d4>)
 8000eb6:	6013      	str	r3, [r2, #0]
		  			 // b=countergreen13;
		  				if(checksavegreen==0){
 8000eb8:	4b73      	ldr	r3, [pc, #460]	; (8001088 <fsm_setting_run+0x4d8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <fsm_setting_run+0x31a>
		  					Save_led7GREEN_segment_run13();
 8000ec0:	f000 ff36 	bl	8001d30 <Save_led7GREEN_segment_run13>
		  					checksavegreen=1;
 8000ec4:	4b70      	ldr	r3, [pc, #448]	; (8001088 <fsm_setting_run+0x4d8>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
//		  				}
//		  				if(isTimerExpired(3)==1){
//		  					HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin);
//		  					setTimer(3, 500);
//		  				}
		  				if(isButtonPressed(0)==1){
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff f93e 	bl	800014c <isButtonPressed>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d12d      	bne.n	8000f32 <fsm_setting_run+0x382>
		  					status= MAN_YELLOW;
 8000ed6:	4b6d      	ldr	r3, [pc, #436]	; (800108c <fsm_setting_run+0x4dc>)
 8000ed8:	220e      	movs	r2, #14
 8000eda:	601a      	str	r2, [r3, #0]
		  					check=0;
 8000edc:	4b6c      	ldr	r3, [pc, #432]	; (8001090 <fsm_setting_run+0x4e0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
		  					checkcounteryellow=0;
 8000ee2:	4b6c      	ldr	r3, [pc, #432]	; (8001094 <fsm_setting_run+0x4e4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
							SCH_Delete_Task(task_id10);
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <fsm_setting_run+0x4e8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fa7d 	bl	80023ec <SCH_Delete_Task>
							SCH_Delete_Task(task_id11);
 8000ef2:	4b6a      	ldr	r3, [pc, #424]	; (800109c <fsm_setting_run+0x4ec>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fa78 	bl	80023ec <SCH_Delete_Task>
							task_id13= SCH_Add_Task(Save_led7YELLOW_segment_run02,50,100);
 8000efc:	2264      	movs	r2, #100	; 0x64
 8000efe:	2132      	movs	r1, #50	; 0x32
 8000f00:	4867      	ldr	r0, [pc, #412]	; (80010a0 <fsm_setting_run+0x4f0>)
 8000f02:	f001 f969 	bl	80021d8 <SCH_Add_Task>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b66      	ldr	r3, [pc, #408]	; (80010a4 <fsm_setting_run+0x4f4>)
 8000f0c:	601a      	str	r2, [r3, #0]
							task_id14= SCH_Add_Task(Save_led7YELLOW_segment_run13,0,100);
 8000f0e:	2264      	movs	r2, #100	; 0x64
 8000f10:	2100      	movs	r1, #0
 8000f12:	4865      	ldr	r0, [pc, #404]	; (80010a8 <fsm_setting_run+0x4f8>)
 8000f14:	f001 f960 	bl	80021d8 <SCH_Add_Task>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b63      	ldr	r3, [pc, #396]	; (80010ac <fsm_setting_run+0x4fc>)
 8000f1e:	601a      	str	r2, [r3, #0]
							task_id15= SCH_Add_Task(LED_YELLOW_TEST, 50, 50);
 8000f20:	2232      	movs	r2, #50	; 0x32
 8000f22:	2132      	movs	r1, #50	; 0x32
 8000f24:	4862      	ldr	r0, [pc, #392]	; (80010b0 <fsm_setting_run+0x500>)
 8000f26:	f001 f957 	bl	80021d8 <SCH_Add_Task>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <fsm_setting_run+0x504>)
 8000f30:	601a      	str	r2, [r3, #0]
//							clear_timer_flag(3);
//		  					setTimer(1, 500);
//		  					setTimer(2, 1000);
//		  					setTimer(3, 500);
		  				}
		  				if(isButtonPressed(1)==1){
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff f90a 	bl	800014c <isButtonPressed>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	f040 8098 	bne.w	8001070 <fsm_setting_run+0x4c0>
		  					status=INCREASE_VALUE_LED_GREEN;
 8000f40:	4b52      	ldr	r3, [pc, #328]	; (800108c <fsm_setting_run+0x4dc>)
 8000f42:	2212      	movs	r2, #18
 8000f44:	601a      	str	r2, [r3, #0]
		  					checksavegreen=0;
 8000f46:	4b50      	ldr	r3, [pc, #320]	; (8001088 <fsm_setting_run+0x4d8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
		  					task_id12= SCH_Add_Task(Save_led7GREEN_segment_run02,50,50);
 8000f4c:	2232      	movs	r2, #50	; 0x32
 8000f4e:	2132      	movs	r1, #50	; 0x32
 8000f50:	4859      	ldr	r0, [pc, #356]	; (80010b8 <fsm_setting_run+0x508>)
 8000f52:	f001 f941 	bl	80021d8 <SCH_Add_Task>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b58      	ldr	r3, [pc, #352]	; (80010bc <fsm_setting_run+0x50c>)
 8000f5c:	601a      	str	r2, [r3, #0]
//							clear_timer_flag(3);
//		  					setTimer(1, 500);
//		  					setTimer(2, 1000);
//		  					setTimer(3, 500);
		  				}
		  			  break;
 8000f5e:	e087      	b.n	8001070 <fsm_setting_run+0x4c0>
		  case INCREASE_VALUE_LED_YELLOW:
			//  SCH_Dispatch_Tasks();
				if(checksaveyellow==0){
 8000f60:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <fsm_setting_run+0x510>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d108      	bne.n	8000f7a <fsm_setting_run+0x3ca>
					Turn_On_All_LED_YELLOW();
 8000f68:	f001 fb38 	bl	80025dc <Turn_On_All_LED_YELLOW>
					Increase_Save_led7YELLOW_segment_run13();
 8000f6c:	f000 ffaa 	bl	8001ec4 <Increase_Save_led7YELLOW_segment_run13>
					++checksaveyellow;
 8000f70:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <fsm_setting_run+0x510>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <fsm_setting_run+0x510>)
 8000f78:	6013      	str	r3, [r2, #0]
//				}
//				if(isTimerExpired(3)==1){
//					HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin);
//					setTimer(3, 500);
//				}
				if(isButtonPressed(0)==1){
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff f8e6 	bl	800014c <isButtonPressed>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d115      	bne.n	8000fb2 <fsm_setting_run+0x402>
					status= INIT;
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <fsm_setting_run+0x4dc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
					counteryellow=c;
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <fsm_setting_run+0x514>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a4d      	ldr	r2, [pc, #308]	; (80010c8 <fsm_setting_run+0x518>)
 8000f92:	6013      	str	r3, [r2, #0]
					SCH_Delete_Task(task_id13);
 8000f94:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <fsm_setting_run+0x4f4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fa27 	bl	80023ec <SCH_Delete_Task>
					SCH_Delete_Task(task_id14);
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <fsm_setting_run+0x4fc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fa22 	bl	80023ec <SCH_Delete_Task>
					SCH_Delete_Task(task_id15);
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <fsm_setting_run+0x504>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 fa1d 	bl	80023ec <SCH_Delete_Task>
//					clear_timer_flag(1);
//					clear_timer_flag(2);
				}
				if(isButtonPressed(1)==1){
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff f8ca 	bl	800014c <isButtonPressed>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d106      	bne.n	8000fcc <fsm_setting_run+0x41c>
					++checksaveyellow;
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <fsm_setting_run+0x510>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a3e      	ldr	r2, [pc, #248]	; (80010c0 <fsm_setting_run+0x510>)
 8000fc6:	6013      	str	r3, [r2, #0]
				    Increase_Save_led7YELLOW_segment_run13();
 8000fc8:	f000 ff7c 	bl	8001ec4 <Increase_Save_led7YELLOW_segment_run13>
//					clear_timer_flag(3);
//					setTimer(1, 500);
//					setTimer(2, 1000);
//					setTimer(3, 500);
				}
				if(isButtonPressed(2)==1){
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f7ff f8bd 	bl	800014c <isButtonPressed>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d14d      	bne.n	8001074 <fsm_setting_run+0x4c4>
					status=SET_VALUE_LED_YELLOW;
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <fsm_setting_run+0x4dc>)
 8000fda:	2215      	movs	r2, #21
 8000fdc:	601a      	str	r2, [r3, #0]
					checksaveyellow=0;
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <fsm_setting_run+0x510>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
					SCH_Delete_Task(task_id15);
 8000fe4:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <fsm_setting_run+0x504>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 f9ff 	bl	80023ec <SCH_Delete_Task>
//					clear_timer_flag(1);
//					clear_timer_flag(2);
//					setTimer(1, 500);
//					setTimer(2, 1000);
				}
			  break;
 8000fee:	e041      	b.n	8001074 <fsm_setting_run+0x4c4>
		  case SET_VALUE_LED_YELLOW:
			//  SCH_Dispatch_Tasks();
			          Turn_On_All_LED_YELLOW();
 8000ff0:	f001 faf4 	bl	80025dc <Turn_On_All_LED_YELLOW>
		  			  counteryellow = savecounteryellow13;
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <fsm_setting_run+0x51c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <fsm_setting_run+0x518>)
 8000ffa:	6013      	str	r3, [r2, #0]
		  			//  c=counteryellow13;
		  				if(checksaveyellow==0){
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <fsm_setting_run+0x510>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d104      	bne.n	800100e <fsm_setting_run+0x45e>
		  					Save_led7YELLOW_segment_run13();
 8001004:	f000 ff1a 	bl	8001e3c <Save_led7YELLOW_segment_run13>
		  					checksaveyellow=1;
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <fsm_setting_run+0x510>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
//		  				}
//		  				if(isTimerExpired(3)==1){
//		  					HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin);
//		  					setTimer(3, 500);
//		  				}
		  				if(isButtonPressed(0)==1){
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff f89c 	bl	800014c <isButtonPressed>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10c      	bne.n	8001034 <fsm_setting_run+0x484>
		  					status= INIT;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <fsm_setting_run+0x4dc>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
							SCH_Delete_Task(task_id13);
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <fsm_setting_run+0x4f4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f001 f9e1 	bl	80023ec <SCH_Delete_Task>
							SCH_Delete_Task(task_id14);
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <fsm_setting_run+0x4fc>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f001 f9dc 	bl	80023ec <SCH_Delete_Task>
//		  					clear_timer_flag(1);
//		  					clear_timer_flag(2);
		  				}
		  				if(isButtonPressed(1)==1){
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff f889 	bl	800014c <isButtonPressed>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d11b      	bne.n	8001078 <fsm_setting_run+0x4c8>
		  					status=INCREASE_VALUE_LED_YELLOW;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <fsm_setting_run+0x4dc>)
 8001042:	2214      	movs	r2, #20
 8001044:	601a      	str	r2, [r3, #0]
		  					checksaveyellow=0;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <fsm_setting_run+0x510>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
		  					task_id15= SCH_Add_Task(Save_led7YELLOW_segment_run02,50,50);
 800104c:	2232      	movs	r2, #50	; 0x32
 800104e:	2132      	movs	r1, #50	; 0x32
 8001050:	4813      	ldr	r0, [pc, #76]	; (80010a0 <fsm_setting_run+0x4f0>)
 8001052:	f001 f8c1 	bl	80021d8 <SCH_Add_Task>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <fsm_setting_run+0x504>)
 800105c:	601a      	str	r2, [r3, #0]
//							clear_timer_flag(3);
//		  					setTimer(1, 500);
//		  					setTimer(2, 1000);
//		  					setTimer(3, 500);
		  				}
		  			  break;
 800105e:	e00b      	b.n	8001078 <fsm_setting_run+0x4c8>
		  default:
			  break;
 8001060:	bf00      	nop
 8001062:	e00a      	b.n	800107a <fsm_setting_run+0x4ca>
			  break;
 8001064:	bf00      	nop
 8001066:	e008      	b.n	800107a <fsm_setting_run+0x4ca>
			  break;
 8001068:	bf00      	nop
 800106a:	e006      	b.n	800107a <fsm_setting_run+0x4ca>
			  break;
 800106c:	bf00      	nop
 800106e:	e004      	b.n	800107a <fsm_setting_run+0x4ca>
		  			  break;
 8001070:	bf00      	nop
 8001072:	e002      	b.n	800107a <fsm_setting_run+0x4ca>
			  break;
 8001074:	bf00      	nop
 8001076:	e000      	b.n	800107a <fsm_setting_run+0x4ca>
		  			  break;
 8001078:	bf00      	nop
      }
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000100 	.word	0x20000100
 8001084:	20000060 	.word	0x20000060
 8001088:	200000a4 	.word	0x200000a4
 800108c:	200000ac 	.word	0x200000ac
 8001090:	2000009c 	.word	0x2000009c
 8001094:	200000bc 	.word	0x200000bc
 8001098:	200000cc 	.word	0x200000cc
 800109c:	200000c8 	.word	0x200000c8
 80010a0:	08001bc5 	.word	0x08001bc5
 80010a4:	200000f0 	.word	0x200000f0
 80010a8:	08001e3d 	.word	0x08001e3d
 80010ac:	200000f8 	.word	0x200000f8
 80010b0:	08001f71 	.word	0x08001f71
 80010b4:	200000e0 	.word	0x200000e0
 80010b8:	08001b65 	.word	0x08001b65
 80010bc:	200000d8 	.word	0x200000d8
 80010c0:	200000a8 	.word	0x200000a8
 80010c4:	20000058 	.word	0x20000058
 80010c8:	20000064 	.word	0x20000064
 80010cc:	200000b8 	.word	0x200000b8

080010d0 <status_transition_AUTO_GREEN1_RED2>:

int status=0;
int before=0;
int after=0;

void status_transition_AUTO_GREEN1_RED2(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	status=AUTO_YELLOW1_RED2;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <status_transition_AUTO_GREEN1_RED2+0x48>)
 80010d6:	2205      	movs	r2, #5
 80010d8:	601a      	str	r2, [r3, #0]
	SCH_Delete_Task(task_id1);
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <status_transition_AUTO_GREEN1_RED2+0x4c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f984 	bl	80023ec <SCH_Delete_Task>
	SCH_Delete_Task(task_id2);
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <status_transition_AUTO_GREEN1_RED2+0x50>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f97f 	bl	80023ec <SCH_Delete_Task>
	task_id1 =  SCH_Add_Task(led7_segment_run02, 50, 100);
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	2132      	movs	r1, #50	; 0x32
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <status_transition_AUTO_GREEN1_RED2+0x54>)
 80010f4:	f001 f870 	bl	80021d8 <SCH_Add_Task>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <status_transition_AUTO_GREEN1_RED2+0x4c>)
 80010fe:	601a      	str	r2, [r3, #0]
	task_id2 =  SCH_Add_Task(led7_segment_run13, 0, 100);
 8001100:	2264      	movs	r2, #100	; 0x64
 8001102:	2100      	movs	r1, #0
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <status_transition_AUTO_GREEN1_RED2+0x58>)
 8001106:	f001 f867 	bl	80021d8 <SCH_Add_Task>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <status_transition_AUTO_GREEN1_RED2+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
	//status=5;
//	SCH_Add_Task(status_transition_AUTO_YELLOW1_RED2, (c+1)*100,0);
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000ac 	.word	0x200000ac
 800111c:	200000c0 	.word	0x200000c0
 8001120:	200000ec 	.word	0x200000ec
 8001124:	08001495 	.word	0x08001495
 8001128:	08001761 	.word	0x08001761

0800112c <status_transition_AUTO_RED1_YELLOW2>:
void status_transition_AUTO_RED1_YELLOW2(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	status=AUTO_GREEN1_RED2;
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <status_transition_AUTO_RED1_YELLOW2+0x48>)
 8001132:	2204      	movs	r2, #4
 8001134:	601a      	str	r2, [r3, #0]
	SCH_Delete_Task(task_id1);
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <status_transition_AUTO_RED1_YELLOW2+0x4c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f001 f956 	bl	80023ec <SCH_Delete_Task>
	SCH_Delete_Task(task_id2);
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <status_transition_AUTO_RED1_YELLOW2+0x50>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f001 f951 	bl	80023ec <SCH_Delete_Task>
	task_id1 =  SCH_Add_Task(led7_segment_run02, 50, 100);
 800114a:	2264      	movs	r2, #100	; 0x64
 800114c:	2132      	movs	r1, #50	; 0x32
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <status_transition_AUTO_RED1_YELLOW2+0x54>)
 8001150:	f001 f842 	bl	80021d8 <SCH_Add_Task>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <status_transition_AUTO_RED1_YELLOW2+0x4c>)
 800115a:	601a      	str	r2, [r3, #0]
	task_id2 =  SCH_Add_Task(led7_segment_run13, 0, 100);
 800115c:	2264      	movs	r2, #100	; 0x64
 800115e:	2100      	movs	r1, #0
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <status_transition_AUTO_RED1_YELLOW2+0x58>)
 8001162:	f001 f839 	bl	80021d8 <SCH_Add_Task>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <status_transition_AUTO_RED1_YELLOW2+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
	//status=4;
	//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//	SCH_Add_Task(status_transition_AUTO_GREEN1_RED2,(b+1)*100,0);
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000ac 	.word	0x200000ac
 8001178:	200000c0 	.word	0x200000c0
 800117c:	200000ec 	.word	0x200000ec
 8001180:	08001495 	.word	0x08001495
 8001184:	08001761 	.word	0x08001761

08001188 <status_transition_AUTO_RED1_GREEN2>:
void status_transition_AUTO_RED1_GREEN2(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	status=AUTO_RED1_YELLOW2;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <status_transition_AUTO_RED1_GREEN2+0x48>)
 800118e:	2203      	movs	r2, #3
 8001190:	601a      	str	r2, [r3, #0]
	SCH_Delete_Task(task_id1);
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <status_transition_AUTO_RED1_GREEN2+0x4c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f001 f928 	bl	80023ec <SCH_Delete_Task>
	SCH_Delete_Task(task_id2);
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <status_transition_AUTO_RED1_GREEN2+0x50>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 f923 	bl	80023ec <SCH_Delete_Task>
	task_id1 =  SCH_Add_Task(led7_segment_run02, 50, 100);
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	2132      	movs	r1, #50	; 0x32
 80011aa:	480c      	ldr	r0, [pc, #48]	; (80011dc <status_transition_AUTO_RED1_GREEN2+0x54>)
 80011ac:	f001 f814 	bl	80021d8 <SCH_Add_Task>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <status_transition_AUTO_RED1_GREEN2+0x4c>)
 80011b6:	601a      	str	r2, [r3, #0]
	task_id2 =  SCH_Add_Task(led7_segment_run13, 0, 100);
 80011b8:	2264      	movs	r2, #100	; 0x64
 80011ba:	2100      	movs	r1, #0
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <status_transition_AUTO_RED1_GREEN2+0x58>)
 80011be:	f001 f80b 	bl	80021d8 <SCH_Add_Task>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <status_transition_AUTO_RED1_GREEN2+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
	//status=3;
//	SCH_Add_Task(status_transition_AUTO_RED1_YELLOW2, (c+1)*100,0);
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000ac 	.word	0x200000ac
 80011d4:	200000c0 	.word	0x200000c0
 80011d8:	200000ec 	.word	0x200000ec
 80011dc:	08001495 	.word	0x08001495
 80011e0:	08001761 	.word	0x08001761

080011e4 <status_transition_AUTO_YELLOW1_RED2>:

void status_transition_AUTO_YELLOW1_RED2(){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	status=AUTO_RED1_GREEN2;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <status_transition_AUTO_YELLOW1_RED2+0x48>)
 80011ea:	2202      	movs	r2, #2
 80011ec:	601a      	str	r2, [r3, #0]
	SCH_Delete_Task(task_id1);
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <status_transition_AUTO_YELLOW1_RED2+0x4c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f8fa 	bl	80023ec <SCH_Delete_Task>
	SCH_Delete_Task(task_id2);
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <status_transition_AUTO_YELLOW1_RED2+0x50>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 f8f5 	bl	80023ec <SCH_Delete_Task>
	task_id1 =  SCH_Add_Task(led7_segment_run02, 50, 100);
 8001202:	2264      	movs	r2, #100	; 0x64
 8001204:	2132      	movs	r1, #50	; 0x32
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <status_transition_AUTO_YELLOW1_RED2+0x54>)
 8001208:	f000 ffe6 	bl	80021d8 <SCH_Add_Task>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <status_transition_AUTO_YELLOW1_RED2+0x4c>)
 8001212:	601a      	str	r2, [r3, #0]
	task_id2 =  SCH_Add_Task(led7_segment_run13, 0, 100);
 8001214:	2264      	movs	r2, #100	; 0x64
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <status_transition_AUTO_YELLOW1_RED2+0x58>)
 800121a:	f000 ffdd 	bl	80021d8 <SCH_Add_Task>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <status_transition_AUTO_YELLOW1_RED2+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
//	status=INIT;
	//status=2;
//	SCH_Add_Task(status_transition_AUTO_RED1_GREEN2, (b+1)*100,0);
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000ac 	.word	0x200000ac
 8001230:	200000c0 	.word	0x200000c0
 8001234:	200000ec 	.word	0x200000ec
 8001238:	08001495 	.word	0x08001495
 800123c:	08001761 	.word	0x08001761

08001240 <set_led7_segement>:
int counterred=5;
int countergreen=3;
int counteryellow=1;

int savecounterred02,savecountergreen02,savecounteryellow02=0;
void set_led7_segement(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 8001244:	2201      	movs	r2, #1
 8001246:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <set_led7_segement+0x20>)
 800124c:	f001 fd93 	bl	8002d76 <HAL_GPIO_WritePin>
		                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
		                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, SEG0Y_Pin|SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin|SEG5Y_Pin|SEG6Y_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <set_led7_segement+0x24>)
 8001258:	f001 fd8d 	bl	8002d76 <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40010800 	.word	0x40010800

08001268 <display7SEGX>:
void display7SEGX(int num) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
      const uint8_t segmentMap[10] = {
 8001270:	4a3f      	ldr	r2, [pc, #252]	; (8001370 <display7SEGX+0x108>)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	ca07      	ldmia	r2, {r0, r1, r2}
 8001278:	c303      	stmia	r3!, {r0, r1}
 800127a:	801a      	strh	r2, [r3, #0]
          0b10111110,
          0b11100000,
          0b11111110,
          0b11110110
      };
      HAL_GPIO_WritePin(SEG0X_GPIO_Port, SEG0X_Pin, (segmentMap[num] & 0b10000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800127c:	f107 020c 	add.w	r2, r7, #12
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	09db      	lsrs	r3, r3, #7
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	2101      	movs	r1, #1
 8001294:	4837      	ldr	r0, [pc, #220]	; (8001374 <display7SEGX+0x10c>)
 8001296:	f001 fd6e 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG1X_GPIO_Port, SEG1X_Pin, (segmentMap[num] & 0b01000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	2102      	movs	r1, #2
 80012b6:	482f      	ldr	r0, [pc, #188]	; (8001374 <display7SEGX+0x10c>)
 80012b8:	f001 fd5d 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG2X_GPIO_Port, SEG2X_Pin, (segmentMap[num] & 0b00100000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	2104      	movs	r1, #4
 80012d8:	4826      	ldr	r0, [pc, #152]	; (8001374 <display7SEGX+0x10c>)
 80012da:	f001 fd4c 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG3X_GPIO_Port, SEG3X_Pin, (segmentMap[num] & 0b00010000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80012de:	f107 020c 	add.w	r2, r7, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	2108      	movs	r1, #8
 80012fa:	481e      	ldr	r0, [pc, #120]	; (8001374 <display7SEGX+0x10c>)
 80012fc:	f001 fd3b 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG4X_GPIO_Port, SEG4X_Pin, (segmentMap[num] & 0b00001000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001300:	f107 020c 	add.w	r2, r7, #12
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	2110      	movs	r1, #16
 800131c:	4815      	ldr	r0, [pc, #84]	; (8001374 <display7SEGX+0x10c>)
 800131e:	f001 fd2a 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG5X_GPIO_Port, SEG5X_Pin, (segmentMap[num] & 0b00000100) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001322:	f107 020c 	add.w	r2, r7, #12
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	2120      	movs	r1, #32
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <display7SEGX+0x10c>)
 8001340:	f001 fd19 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG6X_GPIO_Port, SEG6X_Pin, (segmentMap[num] & 0b00000010) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001344:	f107 020c 	add.w	r2, r7, #12
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <display7SEGX+0x10c>)
 8001362:	f001 fd08 	bl	8002d76 <HAL_GPIO_WritePin>
  }
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	08003db8 	.word	0x08003db8
 8001374:	40010c00 	.word	0x40010c00

08001378 <display7SEGY>:
void display7SEGY(int num) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
      const uint8_t segmentMap[10] = {
 8001380:	4a42      	ldr	r2, [pc, #264]	; (800148c <display7SEGY+0x114>)
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	ca07      	ldmia	r2, {r0, r1, r2}
 8001388:	c303      	stmia	r3!, {r0, r1}
 800138a:	801a      	strh	r2, [r3, #0]
          0b10111110,
          0b11100000,
          0b11111110,
          0b11110110
      };
      HAL_GPIO_WritePin(SEG0Y_GPIO_Port, SEG0Y_Pin, (segmentMap[num] & 0b10000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800138c:	f107 020c 	add.w	r2, r7, #12
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b25b      	sxtb	r3, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	09db      	lsrs	r3, r3, #7
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a6:	483a      	ldr	r0, [pc, #232]	; (8001490 <display7SEGY+0x118>)
 80013a8:	f001 fce5 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG1Y_GPIO_Port, SEG1Y_Pin, (segmentMap[num] & 0b01000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80013ac:	f107 020c 	add.w	r2, r7, #12
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	4831      	ldr	r0, [pc, #196]	; (8001490 <display7SEGY+0x118>)
 80013cc:	f001 fcd3 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG2Y_GPIO_Port, SEG2Y_Pin, (segmentMap[num] & 0b00100000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80013d0:	f107 020c 	add.w	r2, r7, #12
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <display7SEGY+0x118>)
 80013f0:	f001 fcc1 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG3Y_GPIO_Port, SEG3Y_Pin, (segmentMap[num] & 0b00010000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80013f4:	f107 020c 	add.w	r2, r7, #12
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf0c      	ite	eq
 8001406:	2301      	moveq	r3, #1
 8001408:	2300      	movne	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001412:	481f      	ldr	r0, [pc, #124]	; (8001490 <display7SEGY+0x118>)
 8001414:	f001 fcaf 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG4Y_GPIO_Port, SEG4Y_Pin, (segmentMap[num] & 0b00001000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001418:	f107 020c 	add.w	r2, r7, #12
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <display7SEGY+0x118>)
 8001438:	f001 fc9d 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG5Y_GPIO_Port, SEG5Y_Pin, (segmentMap[num] & 0b00000100) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf0c      	ite	eq
 800144e:	2301      	moveq	r3, #1
 8001450:	2300      	movne	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145a:	480d      	ldr	r0, [pc, #52]	; (8001490 <display7SEGY+0x118>)
 800145c:	f001 fc8b 	bl	8002d76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG6Y_GPIO_Port, SEG6Y_Pin, (segmentMap[num] & 0b00000010) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001460:	f107 020c 	add.w	r2, r7, #12
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf0c      	ite	eq
 8001472:	2301      	moveq	r3, #1
 8001474:	2300      	movne	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <display7SEGY+0x118>)
 8001480:	f001 fc79 	bl	8002d76 <HAL_GPIO_WritePin>
  }
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	08003db8 	.word	0x08003db8
 8001490:	40010800 	.word	0x40010800

08001494 <led7_segment_run02>:
void led7_segment_run02(){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

	if(idx_led02>=(2*b+2*(c+1)+2)) idx_led02=0;
 8001498:	4ba9      	ldr	r3, [pc, #676]	; (8001740 <led7_segment_run02+0x2ac>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	4ba9      	ldr	r3, [pc, #676]	; (8001744 <led7_segment_run02+0x2b0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	3301      	adds	r3, #1
 80014a6:	005a      	lsls	r2, r3, #1
 80014a8:	4ba7      	ldr	r3, [pc, #668]	; (8001748 <led7_segment_run02+0x2b4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dc02      	bgt.n	80014b6 <led7_segment_run02+0x22>
 80014b0:	4ba5      	ldr	r3, [pc, #660]	; (8001748 <led7_segment_run02+0x2b4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
	idx_led02++;
 80014b6:	4ba4      	ldr	r3, [pc, #656]	; (8001748 <led7_segment_run02+0x2b4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4aa2      	ldr	r2, [pc, #648]	; (8001748 <led7_segment_run02+0x2b4>)
 80014be:	6013      	str	r3, [r2, #0]
	if(idx_led02<=b+1){
 80014c0:	4ba0      	ldr	r3, [pc, #640]	; (8001744 <led7_segment_run02+0x2b0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	4ba0      	ldr	r3, [pc, #640]	; (8001748 <led7_segment_run02+0x2b4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	db38      	blt.n	8001540 <led7_segment_run02+0xac>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d4:	489d      	ldr	r0, [pc, #628]	; (800174c <led7_segment_run02+0x2b8>)
 80014d6:	f001 fc4e 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e0:	489a      	ldr	r0, [pc, #616]	; (800174c <led7_segment_run02+0x2b8>)
 80014e2:	f001 fc48 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	4898      	ldr	r0, [pc, #608]	; (800174c <led7_segment_run02+0x2b8>)
 80014ec:	f001 fc43 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f6:	4895      	ldr	r0, [pc, #596]	; (800174c <led7_segment_run02+0x2b8>)
 80014f8:	f001 fc3d 	bl	8002d76 <HAL_GPIO_WritePin>

					display7SEGX((counterred+1)/10);
 80014fc:	4b94      	ldr	r3, [pc, #592]	; (8001750 <led7_segment_run02+0x2bc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a94      	ldr	r2, [pc, #592]	; (8001754 <led7_segment_run02+0x2c0>)
 8001504:	fb82 1203 	smull	r1, r2, r2, r3
 8001508:	1092      	asrs	r2, r2, #2
 800150a:	17db      	asrs	r3, r3, #31
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff feaa 	bl	8001268 <display7SEGX>
					if(idx_led02>=(b+1)) display7SEGY(0);
 8001514:	4b8b      	ldr	r3, [pc, #556]	; (8001744 <led7_segment_run02+0x2b0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <led7_segment_run02+0x2b4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	da03      	bge.n	8001528 <led7_segment_run02+0x94>
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ff29 	bl	8001378 <display7SEGY>
 8001526:	e00b      	b.n	8001540 <led7_segment_run02+0xac>
					else display7SEGY((countergreen+1)/10);
 8001528:	4b8b      	ldr	r3, [pc, #556]	; (8001758 <led7_segment_run02+0x2c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a89      	ldr	r2, [pc, #548]	; (8001754 <led7_segment_run02+0x2c0>)
 8001530:	fb82 1203 	smull	r1, r2, r2, r3
 8001534:	1092      	asrs	r2, r2, #2
 8001536:	17db      	asrs	r3, r3, #31
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff1c 	bl	8001378 <display7SEGY>
	}
	if(idx_led02>b+1&&idx_led02<=(b+c+1+1)){
 8001540:	4b80      	ldr	r3, [pc, #512]	; (8001744 <led7_segment_run02+0x2b0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <led7_segment_run02+0x2b4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	da49      	bge.n	80015e2 <led7_segment_run02+0x14e>
 800154e:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <led7_segment_run02+0x2b0>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b7b      	ldr	r3, [pc, #492]	; (8001740 <led7_segment_run02+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	1c9a      	adds	r2, r3, #2
 800155a:	4b7b      	ldr	r3, [pc, #492]	; (8001748 <led7_segment_run02+0x2b4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	db3f      	blt.n	80015e2 <led7_segment_run02+0x14e>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001568:	4878      	ldr	r0, [pc, #480]	; (800174c <led7_segment_run02+0x2b8>)
 800156a:	f001 fc04 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001574:	4875      	ldr	r0, [pc, #468]	; (800174c <led7_segment_run02+0x2b8>)
 8001576:	f001 fbfe 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	4873      	ldr	r0, [pc, #460]	; (800174c <led7_segment_run02+0x2b8>)
 8001580:	f001 fbf9 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800158a:	4870      	ldr	r0, [pc, #448]	; (800174c <led7_segment_run02+0x2b8>)
 800158c:	f001 fbf3 	bl	8002d76 <HAL_GPIO_WritePin>
					if(idx_led02>=(b+c+1+1)){
 8001590:	4b6c      	ldr	r3, [pc, #432]	; (8001744 <led7_segment_run02+0x2b0>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <led7_segment_run02+0x2ac>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4413      	add	r3, r2
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <led7_segment_run02+0x2b4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	da06      	bge.n	80015b2 <led7_segment_run02+0x11e>
						display7SEGX(0);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff fe5f 	bl	8001268 <display7SEGX>
						display7SEGY(0);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fee4 	bl	8001378 <display7SEGY>
 80015b0:	e017      	b.n	80015e2 <led7_segment_run02+0x14e>
					}
					else{
						display7SEGX((counterred+1)/10);
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <led7_segment_run02+0x2bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a66      	ldr	r2, [pc, #408]	; (8001754 <led7_segment_run02+0x2c0>)
 80015ba:	fb82 1203 	smull	r1, r2, r2, r3
 80015be:	1092      	asrs	r2, r2, #2
 80015c0:	17db      	asrs	r3, r3, #31
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fe4f 	bl	8001268 <display7SEGX>
						display7SEGY((counteryellow+1)/10);
 80015ca:	4b64      	ldr	r3, [pc, #400]	; (800175c <led7_segment_run02+0x2c8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	4a60      	ldr	r2, [pc, #384]	; (8001754 <led7_segment_run02+0x2c0>)
 80015d2:	fb82 1203 	smull	r1, r2, r2, r3
 80015d6:	1092      	asrs	r2, r2, #2
 80015d8:	17db      	asrs	r3, r3, #31
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fecb 	bl	8001378 <display7SEGY>
					}

	}
	if(idx_led02>(b+c+1+1)&&idx_led02<=(2*b+c+1+2)){
 80015e2:	4b58      	ldr	r3, [pc, #352]	; (8001744 <led7_segment_run02+0x2b0>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b56      	ldr	r3, [pc, #344]	; (8001740 <led7_segment_run02+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	1c9a      	adds	r2, r3, #2
 80015ee:	4b56      	ldr	r3, [pc, #344]	; (8001748 <led7_segment_run02+0x2b4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	da48      	bge.n	8001688 <led7_segment_run02+0x1f4>
 80015f6:	4b53      	ldr	r3, [pc, #332]	; (8001744 <led7_segment_run02+0x2b0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	005a      	lsls	r2, r3, #1
 80015fc:	4b50      	ldr	r3, [pc, #320]	; (8001740 <led7_segment_run02+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4413      	add	r3, r2
 8001602:	1cda      	adds	r2, r3, #3
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <led7_segment_run02+0x2b4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	db3d      	blt.n	8001688 <led7_segment_run02+0x1f4>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001612:	484e      	ldr	r0, [pc, #312]	; (800174c <led7_segment_run02+0x2b8>)
 8001614:	f001 fbaf 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	484b      	ldr	r0, [pc, #300]	; (800174c <led7_segment_run02+0x2b8>)
 8001620:	f001 fba9 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	4848      	ldr	r0, [pc, #288]	; (800174c <led7_segment_run02+0x2b8>)
 800162a:	f001 fba4 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001634:	4845      	ldr	r0, [pc, #276]	; (800174c <led7_segment_run02+0x2b8>)
 8001636:	f001 fb9e 	bl	8002d76 <HAL_GPIO_WritePin>
					display7SEGY((counterred+1)/10);
 800163a:	4b45      	ldr	r3, [pc, #276]	; (8001750 <led7_segment_run02+0x2bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a44      	ldr	r2, [pc, #272]	; (8001754 <led7_segment_run02+0x2c0>)
 8001642:	fb82 1203 	smull	r1, r2, r2, r3
 8001646:	1092      	asrs	r2, r2, #2
 8001648:	17db      	asrs	r3, r3, #31
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe93 	bl	8001378 <display7SEGY>
					if(idx_led02>=(2*b+c+1+2)) display7SEGX(0);
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <led7_segment_run02+0x2b0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	005a      	lsls	r2, r3, #1
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <led7_segment_run02+0x2ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4413      	add	r3, r2
 800165e:	1c9a      	adds	r2, r3, #2
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <led7_segment_run02+0x2b4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	da03      	bge.n	8001670 <led7_segment_run02+0x1dc>
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fdfd 	bl	8001268 <display7SEGX>
 800166e:	e00b      	b.n	8001688 <led7_segment_run02+0x1f4>
					else display7SEGX((countergreen+1)/10);
 8001670:	4b39      	ldr	r3, [pc, #228]	; (8001758 <led7_segment_run02+0x2c4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	4a37      	ldr	r2, [pc, #220]	; (8001754 <led7_segment_run02+0x2c0>)
 8001678:	fb82 1203 	smull	r1, r2, r2, r3
 800167c:	1092      	asrs	r2, r2, #2
 800167e:	17db      	asrs	r3, r3, #31
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fdf0 	bl	8001268 <display7SEGX>
	}
	if(idx_led02>(2*b+c+1+2)&&idx_led02<=(2*b+2*(c+1)+2)){
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <led7_segment_run02+0x2b0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	005a      	lsls	r2, r3, #1
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <led7_segment_run02+0x2ac>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	1cda      	adds	r2, r3, #3
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <led7_segment_run02+0x2b4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	da4d      	bge.n	800173a <led7_segment_run02+0x2a6>
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <led7_segment_run02+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <led7_segment_run02+0x2b0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	3301      	adds	r3, #1
 80016ac:	005a      	lsls	r2, r3, #1
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <led7_segment_run02+0x2b4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	db41      	blt.n	800173a <led7_segment_run02+0x2a6>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016bc:	4823      	ldr	r0, [pc, #140]	; (800174c <led7_segment_run02+0x2b8>)
 80016be:	f001 fb5a 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c8:	4820      	ldr	r0, [pc, #128]	; (800174c <led7_segment_run02+0x2b8>)
 80016ca:	f001 fb54 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	481e      	ldr	r0, [pc, #120]	; (800174c <led7_segment_run02+0x2b8>)
 80016d4:	f001 fb4f 	bl	8002d76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016de:	481b      	ldr	r0, [pc, #108]	; (800174c <led7_segment_run02+0x2b8>)
 80016e0:	f001 fb49 	bl	8002d76 <HAL_GPIO_WritePin>
					if(idx_led02>=(2*b+2*(c+1)+2)){
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <led7_segment_run02+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <led7_segment_run02+0x2b0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	3301      	adds	r3, #1
 80016f2:	005a      	lsls	r2, r3, #1
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <led7_segment_run02+0x2b4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dc06      	bgt.n	800170a <led7_segment_run02+0x276>
						display7SEGY(0);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fe3b 	bl	8001378 <display7SEGY>
						display7SEGX(0);
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fdb0 	bl	8001268 <display7SEGX>
//			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
//			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
//			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
//			display7SEGX(counterred02);
//			display7SEGY(0);
}
 8001708:	e017      	b.n	800173a <led7_segment_run02+0x2a6>
						display7SEGY((counterred+1)/10);
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <led7_segment_run02+0x2bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a10      	ldr	r2, [pc, #64]	; (8001754 <led7_segment_run02+0x2c0>)
 8001712:	fb82 1203 	smull	r1, r2, r2, r3
 8001716:	1092      	asrs	r2, r2, #2
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe2b 	bl	8001378 <display7SEGY>
						display7SEGX((counteryellow+1)/10);
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <led7_segment_run02+0x2c8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <led7_segment_run02+0x2c0>)
 800172a:	fb82 1203 	smull	r1, r2, r2, r3
 800172e:	1092      	asrs	r2, r2, #2
 8001730:	17db      	asrs	r3, r3, #31
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fd97 	bl	8001268 <display7SEGX>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000058 	.word	0x20000058
 8001744:	20000054 	.word	0x20000054
 8001748:	200000b0 	.word	0x200000b0
 800174c:	40010c00 	.word	0x40010c00
 8001750:	2000005c 	.word	0x2000005c
 8001754:	66666667 	.word	0x66666667
 8001758:	20000060 	.word	0x20000060
 800175c:	20000064 	.word	0x20000064

08001760 <led7_segment_run13>:
void led7_segment_run13(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	if(idx_led13>=(2*b+2*(c+1)+2)) idx_led13=0;
 8001764:	4b98      	ldr	r3, [pc, #608]	; (80019c8 <led7_segment_run13+0x268>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	4b98      	ldr	r3, [pc, #608]	; (80019cc <led7_segment_run13+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	3301      	adds	r3, #1
 8001772:	005a      	lsls	r2, r3, #1
 8001774:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <led7_segment_run13+0x270>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	dc02      	bgt.n	8001782 <led7_segment_run13+0x22>
 800177c:	4b94      	ldr	r3, [pc, #592]	; (80019d0 <led7_segment_run13+0x270>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	idx_led13++;
 8001782:	4b93      	ldr	r3, [pc, #588]	; (80019d0 <led7_segment_run13+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	4a91      	ldr	r2, [pc, #580]	; (80019d0 <led7_segment_run13+0x270>)
 800178a:	6013      	str	r3, [r2, #0]
	if(idx_led13<=b+1){
 800178c:	4b8f      	ldr	r3, [pc, #572]	; (80019cc <led7_segment_run13+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	4b8f      	ldr	r3, [pc, #572]	; (80019d0 <led7_segment_run13+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	db50      	blt.n	800183c <led7_segment_run13+0xdc>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	488c      	ldr	r0, [pc, #560]	; (80019d4 <led7_segment_run13+0x274>)
 80017a2:	f001 fae8 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ac:	4889      	ldr	r0, [pc, #548]	; (80019d4 <led7_segment_run13+0x274>)
 80017ae:	f001 fae2 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	4887      	ldr	r0, [pc, #540]	; (80019d4 <led7_segment_run13+0x274>)
 80017b8:	f001 fadd 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c2:	4884      	ldr	r0, [pc, #528]	; (80019d4 <led7_segment_run13+0x274>)
 80017c4:	f001 fad7 	bl	8002d76 <HAL_GPIO_WritePin>
		display7SEGX(counterred%10);
 80017c8:	4b83      	ldr	r3, [pc, #524]	; (80019d8 <led7_segment_run13+0x278>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b83      	ldr	r3, [pc, #524]	; (80019dc <led7_segment_run13+0x27c>)
 80017ce:	fb83 1302 	smull	r1, r3, r3, r2
 80017d2:	1099      	asrs	r1, r3, #2
 80017d4:	17d3      	asrs	r3, r2, #31
 80017d6:	1ac9      	subs	r1, r1, r3
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	1ad1      	subs	r1, r2, r3
 80017e2:	4608      	mov	r0, r1
 80017e4:	f7ff fd40 	bl	8001268 <display7SEGX>
		display7SEGY(countergreen%10);
 80017e8:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <led7_segment_run13+0x280>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b7b      	ldr	r3, [pc, #492]	; (80019dc <led7_segment_run13+0x27c>)
 80017ee:	fb83 1302 	smull	r1, r3, r3, r2
 80017f2:	1099      	asrs	r1, r3, #2
 80017f4:	17d3      	asrs	r3, r2, #31
 80017f6:	1ac9      	subs	r1, r1, r3
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	1ad1      	subs	r1, r2, r3
 8001802:	4608      	mov	r0, r1
 8001804:	f7ff fdb8 	bl	8001378 <display7SEGY>
		if(idx_led13>=b+1){
 8001808:	4b70      	ldr	r3, [pc, #448]	; (80019cc <led7_segment_run13+0x26c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b70      	ldr	r3, [pc, #448]	; (80019d0 <led7_segment_run13+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	da09      	bge.n	8001828 <led7_segment_run13+0xc8>
			countergreen=b;
 8001814:	4b6d      	ldr	r3, [pc, #436]	; (80019cc <led7_segment_run13+0x26c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a71      	ldr	r2, [pc, #452]	; (80019e0 <led7_segment_run13+0x280>)
 800181a:	6013      	str	r3, [r2, #0]
			--counterred;
 800181c:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <led7_segment_run13+0x278>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a6d      	ldr	r2, [pc, #436]	; (80019d8 <led7_segment_run13+0x278>)
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e009      	b.n	800183c <led7_segment_run13+0xdc>
		}
		else{
			--countergreen;
 8001828:	4b6d      	ldr	r3, [pc, #436]	; (80019e0 <led7_segment_run13+0x280>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3b01      	subs	r3, #1
 800182e:	4a6c      	ldr	r2, [pc, #432]	; (80019e0 <led7_segment_run13+0x280>)
 8001830:	6013      	str	r3, [r2, #0]
			--counterred;
 8001832:	4b69      	ldr	r3, [pc, #420]	; (80019d8 <led7_segment_run13+0x278>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a67      	ldr	r2, [pc, #412]	; (80019d8 <led7_segment_run13+0x278>)
 800183a:	6013      	str	r3, [r2, #0]
		}
	}
	if(idx_led13>b+1&&idx_led13<=(b+c+1+1)){
 800183c:	4b63      	ldr	r3, [pc, #396]	; (80019cc <led7_segment_run13+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <led7_segment_run13+0x270>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	da5d      	bge.n	8001906 <led7_segment_run13+0x1a6>
 800184a:	4b60      	ldr	r3, [pc, #384]	; (80019cc <led7_segment_run13+0x26c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <led7_segment_run13+0x268>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	1c9a      	adds	r2, r3, #2
 8001856:	4b5e      	ldr	r3, [pc, #376]	; (80019d0 <led7_segment_run13+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	db53      	blt.n	8001906 <led7_segment_run13+0x1a6>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001864:	485b      	ldr	r0, [pc, #364]	; (80019d4 <led7_segment_run13+0x274>)
 8001866:	f001 fa86 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001870:	4858      	ldr	r0, [pc, #352]	; (80019d4 <led7_segment_run13+0x274>)
 8001872:	f001 fa80 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	4856      	ldr	r0, [pc, #344]	; (80019d4 <led7_segment_run13+0x274>)
 800187c:	f001 fa7b 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	4853      	ldr	r0, [pc, #332]	; (80019d4 <led7_segment_run13+0x274>)
 8001888:	f001 fa75 	bl	8002d76 <HAL_GPIO_WritePin>
		display7SEGX(counterred%10);
 800188c:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <led7_segment_run13+0x278>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b52      	ldr	r3, [pc, #328]	; (80019dc <led7_segment_run13+0x27c>)
 8001892:	fb83 1302 	smull	r1, r3, r3, r2
 8001896:	1099      	asrs	r1, r3, #2
 8001898:	17d3      	asrs	r3, r2, #31
 800189a:	1ac9      	subs	r1, r1, r3
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	1ad1      	subs	r1, r2, r3
 80018a6:	4608      	mov	r0, r1
 80018a8:	f7ff fcde 	bl	8001268 <display7SEGX>
		display7SEGY(counteryellow%10);
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <led7_segment_run13+0x284>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <led7_segment_run13+0x27c>)
 80018b2:	fb83 1302 	smull	r1, r3, r3, r2
 80018b6:	1099      	asrs	r1, r3, #2
 80018b8:	17d3      	asrs	r3, r2, #31
 80018ba:	1ac9      	subs	r1, r1, r3
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	1ad1      	subs	r1, r2, r3
 80018c6:	4608      	mov	r0, r1
 80018c8:	f7ff fd56 	bl	8001378 <display7SEGY>
			if(idx_led13>=(b+c+1+1)){
 80018cc:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <led7_segment_run13+0x26c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <led7_segment_run13+0x268>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <led7_segment_run13+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	da08      	bge.n	80018f2 <led7_segment_run13+0x192>
				counterred=a;
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <led7_segment_run13+0x288>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a3c      	ldr	r2, [pc, #240]	; (80019d8 <led7_segment_run13+0x278>)
 80018e6:	6013      	str	r3, [r2, #0]
				counteryellow=c;
 80018e8:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <led7_segment_run13+0x268>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a3d      	ldr	r2, [pc, #244]	; (80019e4 <led7_segment_run13+0x284>)
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e009      	b.n	8001906 <led7_segment_run13+0x1a6>

			//	countergreen13=b;
			}
			else{
				--counterred;
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <led7_segment_run13+0x278>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <led7_segment_run13+0x278>)
 80018fa:	6013      	str	r3, [r2, #0]
				--counteryellow;
 80018fc:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <led7_segment_run13+0x284>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <led7_segment_run13+0x284>)
 8001904:	6013      	str	r3, [r2, #0]
			}
	}
	if(idx_led13>(b+c+1+1)&&idx_led13<=(2*b+c+1+2)){
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <led7_segment_run13+0x26c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <led7_segment_run13+0x268>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	1c9a      	adds	r2, r3, #2
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <led7_segment_run13+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	da72      	bge.n	8001a00 <led7_segment_run13+0x2a0>
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <led7_segment_run13+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	005a      	lsls	r2, r3, #1
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <led7_segment_run13+0x268>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4413      	add	r3, r2
 8001926:	1cda      	adds	r2, r3, #3
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <led7_segment_run13+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	db67      	blt.n	8001a00 <led7_segment_run13+0x2a0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001936:	4827      	ldr	r0, [pc, #156]	; (80019d4 <led7_segment_run13+0x274>)
 8001938:	f001 fa1d 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001942:	4824      	ldr	r0, [pc, #144]	; (80019d4 <led7_segment_run13+0x274>)
 8001944:	f001 fa17 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001948:	2201      	movs	r2, #1
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	4821      	ldr	r0, [pc, #132]	; (80019d4 <led7_segment_run13+0x274>)
 800194e:	f001 fa12 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001958:	481e      	ldr	r0, [pc, #120]	; (80019d4 <led7_segment_run13+0x274>)
 800195a:	f001 fa0c 	bl	8002d76 <HAL_GPIO_WritePin>
		display7SEGY(counterred%10);
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <led7_segment_run13+0x278>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <led7_segment_run13+0x27c>)
 8001964:	fb83 1302 	smull	r1, r3, r3, r2
 8001968:	1099      	asrs	r1, r3, #2
 800196a:	17d3      	asrs	r3, r2, #31
 800196c:	1ac9      	subs	r1, r1, r3
 800196e:	460b      	mov	r3, r1
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	1ad1      	subs	r1, r2, r3
 8001978:	4608      	mov	r0, r1
 800197a:	f7ff fcfd 	bl	8001378 <display7SEGY>
		display7SEGX(countergreen%10);
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <led7_segment_run13+0x280>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <led7_segment_run13+0x27c>)
 8001984:	fb83 1302 	smull	r1, r3, r3, r2
 8001988:	1099      	asrs	r1, r3, #2
 800198a:	17d3      	asrs	r3, r2, #31
 800198c:	1ac9      	subs	r1, r1, r3
 800198e:	460b      	mov	r3, r1
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	1ad1      	subs	r1, r2, r3
 8001998:	4608      	mov	r0, r1
 800199a:	f7ff fc65 	bl	8001268 <display7SEGX>
		if(idx_led13>=2*b+c+1+2){
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <led7_segment_run13+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	005a      	lsls	r2, r3, #1
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <led7_segment_run13+0x268>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	1c9a      	adds	r2, r3, #2
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <led7_segment_run13+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	da1b      	bge.n	80019ec <led7_segment_run13+0x28c>
			countergreen=b;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <led7_segment_run13+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <led7_segment_run13+0x280>)
 80019ba:	6013      	str	r3, [r2, #0]
			--counterred;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <led7_segment_run13+0x278>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <led7_segment_run13+0x278>)
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e01b      	b.n	8001a00 <led7_segment_run13+0x2a0>
 80019c8:	20000058 	.word	0x20000058
 80019cc:	20000054 	.word	0x20000054
 80019d0:	200000b4 	.word	0x200000b4
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	2000005c 	.word	0x2000005c
 80019dc:	66666667 	.word	0x66666667
 80019e0:	20000060 	.word	0x20000060
 80019e4:	20000064 	.word	0x20000064
 80019e8:	20000050 	.word	0x20000050
		}
		else{
			--countergreen;
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <led7_segment_run13+0x380>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	4a3b      	ldr	r2, [pc, #236]	; (8001ae0 <led7_segment_run13+0x380>)
 80019f4:	6013      	str	r3, [r2, #0]
			--counterred;
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <led7_segment_run13+0x384>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	4a39      	ldr	r2, [pc, #228]	; (8001ae4 <led7_segment_run13+0x384>)
 80019fe:	6013      	str	r3, [r2, #0]
		}

	}
	if(idx_led13>(2*b+c+1+2)&&idx_led13<=(2*b+2*(c+1)+2)){
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <led7_segment_run13+0x388>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	005a      	lsls	r2, r3, #1
 8001a06:	4b39      	ldr	r3, [pc, #228]	; (8001aec <led7_segment_run13+0x38c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	1cda      	adds	r2, r3, #3
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <led7_segment_run13+0x390>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	da61      	bge.n	8001ada <led7_segment_run13+0x37a>
 8001a16:	4b35      	ldr	r3, [pc, #212]	; (8001aec <led7_segment_run13+0x38c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <led7_segment_run13+0x388>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	3301      	adds	r3, #1
 8001a24:	005a      	lsls	r2, r3, #1
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <led7_segment_run13+0x390>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	db55      	blt.n	8001ada <led7_segment_run13+0x37a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a34:	482f      	ldr	r0, [pc, #188]	; (8001af4 <led7_segment_run13+0x394>)
 8001a36:	f001 f99e 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a40:	482c      	ldr	r0, [pc, #176]	; (8001af4 <led7_segment_run13+0x394>)
 8001a42:	f001 f998 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	482a      	ldr	r0, [pc, #168]	; (8001af4 <led7_segment_run13+0x394>)
 8001a4c:	f001 f993 	bl	8002d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a56:	4827      	ldr	r0, [pc, #156]	; (8001af4 <led7_segment_run13+0x394>)
 8001a58:	f001 f98d 	bl	8002d76 <HAL_GPIO_WritePin>
		display7SEGY(counterred%10);
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <led7_segment_run13+0x384>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <led7_segment_run13+0x398>)
 8001a62:	fb83 1302 	smull	r1, r3, r3, r2
 8001a66:	1099      	asrs	r1, r3, #2
 8001a68:	17d3      	asrs	r3, r2, #31
 8001a6a:	1ac9      	subs	r1, r1, r3
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	1ad1      	subs	r1, r2, r3
 8001a76:	4608      	mov	r0, r1
 8001a78:	f7ff fc7e 	bl	8001378 <display7SEGY>
		display7SEGX(counteryellow%10);
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <led7_segment_run13+0x39c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <led7_segment_run13+0x398>)
 8001a82:	fb83 1302 	smull	r1, r3, r3, r2
 8001a86:	1099      	asrs	r1, r3, #2
 8001a88:	17d3      	asrs	r3, r2, #31
 8001a8a:	1ac9      	subs	r1, r1, r3
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	1ad1      	subs	r1, r2, r3
 8001a96:	4608      	mov	r0, r1
 8001a98:	f7ff fbe6 	bl	8001268 <display7SEGX>
			if(idx_led13>=(2*b+2*(c+1)+2)){
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <led7_segment_run13+0x38c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <led7_segment_run13+0x388>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	005a      	lsls	r2, r3, #1
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <led7_segment_run13+0x390>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dc08      	bgt.n	8001ac6 <led7_segment_run13+0x366>
				counterred=a;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <led7_segment_run13+0x3a0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <led7_segment_run13+0x384>)
 8001aba:	6013      	str	r3, [r2, #0]
				counteryellow=c;
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <led7_segment_run13+0x38c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <led7_segment_run13+0x39c>)
 8001ac2:	6013      	str	r3, [r2, #0]
			else{
				--counterred;
				--counteryellow;
			}
	}
}
 8001ac4:	e009      	b.n	8001ada <led7_segment_run13+0x37a>
				--counterred;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <led7_segment_run13+0x384>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <led7_segment_run13+0x384>)
 8001ace:	6013      	str	r3, [r2, #0]
				--counteryellow;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <led7_segment_run13+0x39c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <led7_segment_run13+0x39c>)
 8001ad8:	6013      	str	r3, [r2, #0]
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000060 	.word	0x20000060
 8001ae4:	2000005c 	.word	0x2000005c
 8001ae8:	20000054 	.word	0x20000054
 8001aec:	20000058 	.word	0x20000058
 8001af0:	200000b4 	.word	0x200000b4
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	66666667 	.word	0x66666667
 8001afc:	20000064 	.word	0x20000064
 8001b00:	20000050 	.word	0x20000050

08001b04 <Save_led7RED_segment_run02>:
//			break;
//	default:
//		break;
//	}
//}
void Save_led7RED_segment_run02(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0e:	4812      	ldr	r0, [pc, #72]	; (8001b58 <Save_led7RED_segment_run02+0x54>)
 8001b10:	f001 f931 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b1a:	480f      	ldr	r0, [pc, #60]	; (8001b58 <Save_led7RED_segment_run02+0x54>)
 8001b1c:	f001 f92b 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <Save_led7RED_segment_run02+0x54>)
 8001b26:	f001 f926 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <Save_led7RED_segment_run02+0x54>)
 8001b32:	f001 f920 	bl	8002d76 <HAL_GPIO_WritePin>
	display7SEGX(savecounterred13/10);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <Save_led7RED_segment_run02+0x58>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <Save_led7RED_segment_run02+0x5c>)
 8001b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b40:	1092      	asrs	r2, r2, #2
 8001b42:	17db      	asrs	r3, r3, #31
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fb8e 	bl	8001268 <display7SEGX>
	display7SEGY(0);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fc13 	bl	8001378 <display7SEGY>
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	20000110 	.word	0x20000110
 8001b60:	66666667 	.word	0x66666667

08001b64 <Save_led7GREEN_segment_run02>:
void Save_led7GREEN_segment_run02(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6e:	4812      	ldr	r0, [pc, #72]	; (8001bb8 <Save_led7GREEN_segment_run02+0x54>)
 8001b70:	f001 f901 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7a:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <Save_led7GREEN_segment_run02+0x54>)
 8001b7c:	f001 f8fb 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <Save_led7GREEN_segment_run02+0x54>)
 8001b86:	f001 f8f6 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b90:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <Save_led7GREEN_segment_run02+0x54>)
 8001b92:	f001 f8f0 	bl	8002d76 <HAL_GPIO_WritePin>
	display7SEGX(savecountergreen13/10);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <Save_led7GREEN_segment_run02+0x58>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <Save_led7GREEN_segment_run02+0x5c>)
 8001b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba0:	1092      	asrs	r2, r2, #2
 8001ba2:	17db      	asrs	r3, r3, #31
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fb5e 	bl	8001268 <display7SEGX>
	display7SEGY(0);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fbe3 	bl	8001378 <display7SEGY>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	20000100 	.word	0x20000100
 8001bc0:	66666667 	.word	0x66666667

08001bc4 <Save_led7YELLOW_segment_run02>:
void Save_led7YELLOW_segment_run02(){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bce:	4812      	ldr	r0, [pc, #72]	; (8001c18 <Save_led7YELLOW_segment_run02+0x54>)
 8001bd0:	f001 f8d1 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bda:	480f      	ldr	r0, [pc, #60]	; (8001c18 <Save_led7YELLOW_segment_run02+0x54>)
 8001bdc:	f001 f8cb 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <Save_led7YELLOW_segment_run02+0x54>)
 8001be6:	f001 f8c6 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf0:	4809      	ldr	r0, [pc, #36]	; (8001c18 <Save_led7YELLOW_segment_run02+0x54>)
 8001bf2:	f001 f8c0 	bl	8002d76 <HAL_GPIO_WritePin>
	display7SEGX(savecounteryellow13/10);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <Save_led7YELLOW_segment_run02+0x58>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <Save_led7YELLOW_segment_run02+0x5c>)
 8001bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8001c00:	1092      	asrs	r2, r2, #2
 8001c02:	17db      	asrs	r3, r3, #31
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fb2e 	bl	8001268 <display7SEGX>
	display7SEGY(0);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff fbb3 	bl	8001378 <display7SEGY>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40010c00 	.word	0x40010c00
 8001c1c:	200000b8 	.word	0x200000b8
 8001c20:	66666667 	.word	0x66666667

08001c24 <Save_led7RED_segment_run13>:
void Save_led7RED_segment_run13(){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2e:	481a      	ldr	r0, [pc, #104]	; (8001c98 <Save_led7RED_segment_run13+0x74>)
 8001c30:	f001 f8a1 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3a:	4817      	ldr	r0, [pc, #92]	; (8001c98 <Save_led7RED_segment_run13+0x74>)
 8001c3c:	f001 f89b 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	4814      	ldr	r0, [pc, #80]	; (8001c98 <Save_led7RED_segment_run13+0x74>)
 8001c46:	f001 f896 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <Save_led7RED_segment_run13+0x74>)
 8001c52:	f001 f890 	bl	8002d76 <HAL_GPIO_WritePin>
	if(checkcounterred==0){
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <Save_led7RED_segment_run13+0x78>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <Save_led7RED_segment_run13+0x48>
		savecounterred13=a;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <Save_led7RED_segment_run13+0x7c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <Save_led7RED_segment_run13+0x80>)
 8001c64:	6013      	str	r3, [r2, #0]
		checkcounterred=1;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <Save_led7RED_segment_run13+0x78>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecounterred13%10);
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <Save_led7RED_segment_run13+0x80>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <Save_led7RED_segment_run13+0x84>)
 8001c72:	fb83 1302 	smull	r1, r3, r3, r2
 8001c76:	1099      	asrs	r1, r3, #2
 8001c78:	17d3      	asrs	r3, r2, #31
 8001c7a:	1ac9      	subs	r1, r1, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	1ad1      	subs	r1, r2, r3
 8001c86:	4608      	mov	r0, r1
 8001c88:	f7ff faee 	bl	8001268 <display7SEGX>
	display7SEGY(2);
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f7ff fb73 	bl	8001378 <display7SEGY>
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40010c00 	.word	0x40010c00
 8001c9c:	2000010c 	.word	0x2000010c
 8001ca0:	20000050 	.word	0x20000050
 8001ca4:	20000110 	.word	0x20000110
 8001ca8:	66666667 	.word	0x66666667

08001cac <Increase_Save_led7RED_segment_run13>:
void Increase_Save_led7RED_segment_run13(){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb6:	481b      	ldr	r0, [pc, #108]	; (8001d24 <Increase_Save_led7RED_segment_run13+0x78>)
 8001cb8:	f001 f85d 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc2:	4818      	ldr	r0, [pc, #96]	; (8001d24 <Increase_Save_led7RED_segment_run13+0x78>)
 8001cc4:	f001 f857 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	4815      	ldr	r0, [pc, #84]	; (8001d24 <Increase_Save_led7RED_segment_run13+0x78>)
 8001cce:	f001 f852 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd8:	4812      	ldr	r0, [pc, #72]	; (8001d24 <Increase_Save_led7RED_segment_run13+0x78>)
 8001cda:	f001 f84c 	bl	8002d76 <HAL_GPIO_WritePin>
	if((savecounterred13)>=1&&(savecounterred13)<=98){
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <Increase_Save_led7RED_segment_run13+0x7c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	dd1b      	ble.n	8001d1e <Increase_Save_led7RED_segment_run13+0x72>
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <Increase_Save_led7RED_segment_run13+0x7c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b62      	cmp	r3, #98	; 0x62
 8001cec:	dc17      	bgt.n	8001d1e <Increase_Save_led7RED_segment_run13+0x72>
		        ++savecounterred13;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <Increase_Save_led7RED_segment_run13+0x7c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <Increase_Save_led7RED_segment_run13+0x7c>)
 8001cf6:	6013      	str	r3, [r2, #0]
//		        if(((savecounterred13)%10)==0){
//		        	++counterred02;
//		        }
		   		display7SEGX(savecounterred13%10);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <Increase_Save_led7RED_segment_run13+0x7c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <Increase_Save_led7RED_segment_run13+0x80>)
 8001cfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001d02:	1099      	asrs	r1, r3, #2
 8001d04:	17d3      	asrs	r3, r2, #31
 8001d06:	1ac9      	subs	r1, r1, r3
 8001d08:	460b      	mov	r3, r1
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	1ad1      	subs	r1, r2, r3
 8001d12:	4608      	mov	r0, r1
 8001d14:	f7ff faa8 	bl	8001268 <display7SEGX>
		   		display7SEGY(2);
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f7ff fb2d 	bl	8001378 <display7SEGY>
	   }

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	20000110 	.word	0x20000110
 8001d2c:	66666667 	.word	0x66666667

08001d30 <Save_led7GREEN_segment_run13>:
void Save_led7GREEN_segment_run13(){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3a:	481a      	ldr	r0, [pc, #104]	; (8001da4 <Save_led7GREEN_segment_run13+0x74>)
 8001d3c:	f001 f81b 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d46:	4817      	ldr	r0, [pc, #92]	; (8001da4 <Save_led7GREEN_segment_run13+0x74>)
 8001d48:	f001 f815 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	4814      	ldr	r0, [pc, #80]	; (8001da4 <Save_led7GREEN_segment_run13+0x74>)
 8001d52:	f001 f810 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <Save_led7GREEN_segment_run13+0x74>)
 8001d5e:	f001 f80a 	bl	8002d76 <HAL_GPIO_WritePin>
	if(checkcountergreen==0){
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <Save_led7GREEN_segment_run13+0x78>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <Save_led7GREEN_segment_run13+0x48>
		savecountergreen13=b;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <Save_led7GREEN_segment_run13+0x7c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <Save_led7GREEN_segment_run13+0x80>)
 8001d70:	6013      	str	r3, [r2, #0]
		checkcountergreen=1;
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <Save_led7GREEN_segment_run13+0x78>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecountergreen13%10);
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <Save_led7GREEN_segment_run13+0x80>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <Save_led7GREEN_segment_run13+0x84>)
 8001d7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d82:	1099      	asrs	r1, r3, #2
 8001d84:	17d3      	asrs	r3, r2, #31
 8001d86:	1ac9      	subs	r1, r1, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	1ad1      	subs	r1, r2, r3
 8001d92:	4608      	mov	r0, r1
 8001d94:	f7ff fa68 	bl	8001268 <display7SEGX>
	display7SEGY(3);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f7ff faed 	bl	8001378 <display7SEGY>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40010c00 	.word	0x40010c00
 8001da8:	20000104 	.word	0x20000104
 8001dac:	20000054 	.word	0x20000054
 8001db0:	20000100 	.word	0x20000100
 8001db4:	66666667 	.word	0x66666667

08001db8 <Increase_Save_led7GREEN_segment_run13>:
void Increase_Save_led7GREEN_segment_run13(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc2:	481b      	ldr	r0, [pc, #108]	; (8001e30 <Increase_Save_led7GREEN_segment_run13+0x78>)
 8001dc4:	f000 ffd7 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dce:	4818      	ldr	r0, [pc, #96]	; (8001e30 <Increase_Save_led7GREEN_segment_run13+0x78>)
 8001dd0:	f000 ffd1 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	4815      	ldr	r0, [pc, #84]	; (8001e30 <Increase_Save_led7GREEN_segment_run13+0x78>)
 8001dda:	f000 ffcc 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	4812      	ldr	r0, [pc, #72]	; (8001e30 <Increase_Save_led7GREEN_segment_run13+0x78>)
 8001de6:	f000 ffc6 	bl	8002d76 <HAL_GPIO_WritePin>
	if((savecountergreen13)>=1&&(savecountergreen13)<=98){
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <Increase_Save_led7GREEN_segment_run13+0x7c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	dd1b      	ble.n	8001e2a <Increase_Save_led7GREEN_segment_run13+0x72>
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <Increase_Save_led7GREEN_segment_run13+0x7c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b62      	cmp	r3, #98	; 0x62
 8001df8:	dc17      	bgt.n	8001e2a <Increase_Save_led7GREEN_segment_run13+0x72>
		        ++savecountergreen13;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <Increase_Save_led7GREEN_segment_run13+0x7c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <Increase_Save_led7GREEN_segment_run13+0x7c>)
 8001e02:	6013      	str	r3, [r2, #0]
//		        if(((savecountergreen13)%10)==0){
//		        	++counterred02;
//		        }
		   		display7SEGX(savecountergreen13%10);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <Increase_Save_led7GREEN_segment_run13+0x7c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <Increase_Save_led7GREEN_segment_run13+0x80>)
 8001e0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e0e:	1099      	asrs	r1, r3, #2
 8001e10:	17d3      	asrs	r3, r2, #31
 8001e12:	1ac9      	subs	r1, r1, r3
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	1ad1      	subs	r1, r2, r3
 8001e1e:	4608      	mov	r0, r1
 8001e20:	f7ff fa22 	bl	8001268 <display7SEGX>
		   		display7SEGY(3);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f7ff faa7 	bl	8001378 <display7SEGY>
	   }
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40010c00 	.word	0x40010c00
 8001e34:	20000100 	.word	0x20000100
 8001e38:	66666667 	.word	0x66666667

08001e3c <Save_led7YELLOW_segment_run13>:
void Save_led7YELLOW_segment_run13(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e46:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <Save_led7YELLOW_segment_run13+0x74>)
 8001e48:	f000 ff95 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e52:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <Save_led7YELLOW_segment_run13+0x74>)
 8001e54:	f000 ff8f 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <Save_led7YELLOW_segment_run13+0x74>)
 8001e5e:	f000 ff8a 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001e62:	2201      	movs	r2, #1
 8001e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e68:	4811      	ldr	r0, [pc, #68]	; (8001eb0 <Save_led7YELLOW_segment_run13+0x74>)
 8001e6a:	f000 ff84 	bl	8002d76 <HAL_GPIO_WritePin>
	if(checkcounteryellow==0){
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <Save_led7YELLOW_segment_run13+0x78>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <Save_led7YELLOW_segment_run13+0x48>
		savecounteryellow13=c;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <Save_led7YELLOW_segment_run13+0x7c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <Save_led7YELLOW_segment_run13+0x80>)
 8001e7c:	6013      	str	r3, [r2, #0]
		checkcounteryellow=1;
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <Save_led7YELLOW_segment_run13+0x78>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecounteryellow13%10);
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <Save_led7YELLOW_segment_run13+0x80>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <Save_led7YELLOW_segment_run13+0x84>)
 8001e8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e8e:	1099      	asrs	r1, r3, #2
 8001e90:	17d3      	asrs	r3, r2, #31
 8001e92:	1ac9      	subs	r1, r1, r3
 8001e94:	460b      	mov	r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	1ad1      	subs	r1, r2, r3
 8001e9e:	4608      	mov	r0, r1
 8001ea0:	f7ff f9e2 	bl	8001268 <display7SEGX>
	display7SEGY(4);
 8001ea4:	2004      	movs	r0, #4
 8001ea6:	f7ff fa67 	bl	8001378 <display7SEGY>
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40010c00 	.word	0x40010c00
 8001eb4:	200000bc 	.word	0x200000bc
 8001eb8:	20000058 	.word	0x20000058
 8001ebc:	200000b8 	.word	0x200000b8
 8001ec0:	66666667 	.word	0x66666667

08001ec4 <Increase_Save_led7YELLOW_segment_run13>:
void Increase_Save_led7YELLOW_segment_run13(){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ece:	481b      	ldr	r0, [pc, #108]	; (8001f3c <Increase_Save_led7YELLOW_segment_run13+0x78>)
 8001ed0:	f000 ff51 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eda:	4818      	ldr	r0, [pc, #96]	; (8001f3c <Increase_Save_led7YELLOW_segment_run13+0x78>)
 8001edc:	f000 ff4b 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	4815      	ldr	r0, [pc, #84]	; (8001f3c <Increase_Save_led7YELLOW_segment_run13+0x78>)
 8001ee6:	f000 ff46 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef0:	4812      	ldr	r0, [pc, #72]	; (8001f3c <Increase_Save_led7YELLOW_segment_run13+0x78>)
 8001ef2:	f000 ff40 	bl	8002d76 <HAL_GPIO_WritePin>
	if((savecounteryellow13)>=1&&(savecounteryellow13)<=98){
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <Increase_Save_led7YELLOW_segment_run13+0x7c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	dd1b      	ble.n	8001f36 <Increase_Save_led7YELLOW_segment_run13+0x72>
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <Increase_Save_led7YELLOW_segment_run13+0x7c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b62      	cmp	r3, #98	; 0x62
 8001f04:	dc17      	bgt.n	8001f36 <Increase_Save_led7YELLOW_segment_run13+0x72>
		        ++savecounteryellow13;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <Increase_Save_led7YELLOW_segment_run13+0x7c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <Increase_Save_led7YELLOW_segment_run13+0x7c>)
 8001f0e:	6013      	str	r3, [r2, #0]
//		        if(((savecounteryellow13)%10)==0){
//		        	++counterred02;
//		        }
		   		display7SEGX(savecounteryellow13%10);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <Increase_Save_led7YELLOW_segment_run13+0x7c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <Increase_Save_led7YELLOW_segment_run13+0x80>)
 8001f16:	fb83 1302 	smull	r1, r3, r3, r2
 8001f1a:	1099      	asrs	r1, r3, #2
 8001f1c:	17d3      	asrs	r3, r2, #31
 8001f1e:	1ac9      	subs	r1, r1, r3
 8001f20:	460b      	mov	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	1ad1      	subs	r1, r2, r3
 8001f2a:	4608      	mov	r0, r1
 8001f2c:	f7ff f99c 	bl	8001268 <display7SEGX>
		   		display7SEGY(4 );
 8001f30:	2004      	movs	r0, #4
 8001f32:	f7ff fa21 	bl	8001378 <display7SEGY>
	   }
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40010c00 	.word	0x40010c00
 8001f40:	200000b8 	.word	0x200000b8
 8001f44:	66666667 	.word	0x66666667

08001f48 <LED_RED_TEST>:

void LED_RED_TEST(){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 8001f4c:	2112      	movs	r1, #18
 8001f4e:	4802      	ldr	r0, [pc, #8]	; (8001f58 <LED_RED_TEST+0x10>)
 8001f50:	f000 ff29 	bl	8002da6 <HAL_GPIO_TogglePin>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40010800 	.word	0x40010800

08001f5c <LED_GREEN_TEST>:
void LED_GREEN_TEST(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin);
 8001f60:	2144      	movs	r1, #68	; 0x44
 8001f62:	4802      	ldr	r0, [pc, #8]	; (8001f6c <LED_GREEN_TEST+0x10>)
 8001f64:	f000 ff1f 	bl	8002da6 <HAL_GPIO_TogglePin>
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40010800 	.word	0x40010800

08001f70 <LED_YELLOW_TEST>:
void LED_YELLOW_TEST(){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin);
 8001f74:	2188      	movs	r1, #136	; 0x88
 8001f76:	4802      	ldr	r0, [pc, #8]	; (8001f80 <LED_YELLOW_TEST+0x10>)
 8001f78:	f000 ff15 	bl	8002da6 <HAL_GPIO_TogglePin>
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40010800 	.word	0x40010800

08001f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f88:	f000 fbf4 	bl	8002774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8c:	f000 f818 	bl	8001fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f90:	f000 f89e 	bl	80020d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f94:	f000 f850 	bl	8002038 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <main+0x34>)
 8001f9a:	f001 fb49 	bl	8003630 <HAL_TIM_Base_Start_IT>
 //  SCH_Add_Task(led7_segment_run02, 50, 100);
 //  SCH_Add_Task(led7_segment_run13, 0, 100);
  // SCH_Add_Task(fsm_automatic_run, 50, 100);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   status = INIT;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <main+0x38>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  while (1)
  {

	  fsm_automatic_run();
 8001fa4:	f7fe f986 	bl	80002b4 <fsm_automatic_run>
	  fsm_manual_run();
 8001fa8:	f7fe fcd2 	bl	8000950 <fsm_manual_run>
	  fsm_setting_run();
 8001fac:	f7fe fe00 	bl	8000bb0 <fsm_setting_run>
	  SCH_Dispatch_Tasks();
 8001fb0:	f000 f9d0 	bl	8002354 <SCH_Dispatch_Tasks>
	  fsm_automatic_run();
 8001fb4:	e7f6      	b.n	8001fa4 <main+0x20>
 8001fb6:	bf00      	nop
 8001fb8:	2000011c 	.word	0x2000011c
 8001fbc:	200000ac 	.word	0x200000ac

08001fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b090      	sub	sp, #64	; 0x40
 8001fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc6:	f107 0318 	add.w	r3, r7, #24
 8001fca:	2228      	movs	r2, #40	; 0x28
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 fede 	bl	8003d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fea:	2310      	movs	r3, #16
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff2:	f107 0318 	add.w	r3, r7, #24
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 feee 	bl	8002dd8 <HAL_RCC_OscConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002002:	f000 f8e3 	bl	80021cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002006:	230f      	movs	r3, #15
 8002008:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f001 f95a 	bl	80032d8 <HAL_RCC_ClockConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800202a:	f000 f8cf 	bl	80021cc <Error_Handler>
  }
}
 800202e:	bf00      	nop
 8002030:	3740      	adds	r7, #64	; 0x40
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <MX_TIM2_Init+0x94>)
 8002056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800205a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <MX_TIM2_Init+0x94>)
 800205e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002062:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <MX_TIM2_Init+0x94>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <MX_TIM2_Init+0x94>)
 800206c:	2209      	movs	r2, #9
 800206e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <MX_TIM2_Init+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <MX_TIM2_Init+0x94>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800207c:	4813      	ldr	r0, [pc, #76]	; (80020cc <MX_TIM2_Init+0x94>)
 800207e:	f001 fa87 	bl	8003590 <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002088:	f000 f8a0 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	4619      	mov	r1, r3
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <MX_TIM2_Init+0x94>)
 800209a:	f001 fc05 	bl	80038a8 <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020a4:	f000 f892 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b0:	463b      	mov	r3, r7
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_TIM2_Init+0x94>)
 80020b6:	f001 fddd 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020c0:	f000 f884 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000011c 	.word	0x2000011c

080020d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <MX_GPIO_Init+0xd4>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <MX_GPIO_Init+0xd4>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <MX_GPIO_Init+0xd4>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <MX_GPIO_Init+0xd4>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <MX_GPIO_Init+0xd4>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <MX_GPIO_Init+0xd4>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <MX_GPIO_Init+0xd4>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <MX_GPIO_Init+0xd4>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6193      	str	r3, [r2, #24]
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <MX_GPIO_Init+0xd4>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 800212c:	2200      	movs	r2, #0
 800212e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002132:	481d      	ldr	r0, [pc, #116]	; (80021a8 <MX_GPIO_Init+0xd8>)
 8002134:	f000 fe1f 	bl	8002d76 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0Y_Pin
                          |SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin
                          |SEG5Y_Pin|SEG6Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 8002138:	2200      	movs	r2, #0
 800213a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800213e:	481b      	ldr	r0, [pc, #108]	; (80021ac <MX_GPIO_Init+0xdc>)
 8002140:	f000 fe19 	bl	8002d76 <HAL_GPIO_WritePin>
                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8002144:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214e:	2301      	movs	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	4619      	mov	r1, r3
 8002158:	4815      	ldr	r0, [pc, #84]	; (80021b0 <MX_GPIO_Init+0xe0>)
 800215a:	f000 fc7b 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_RED_Pin LED_GREEN2_Pin LED_YELLOW2_Pin SEG0Y_Pin
                           SEG1Y_Pin SEG2Y_Pin SEG3Y_Pin SEG4Y_Pin
                           SEG5Y_Pin SEG6Y_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 800215e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8002162:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0Y_Pin
                          |SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin
                          |SEG5Y_Pin|SEG6Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002164:	2301      	movs	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2302      	movs	r3, #2
 800216e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <MX_GPIO_Init+0xd8>)
 8002178:	f000 fc6c 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0X_Pin SEG1X_Pin SEG2X_Pin EN3_Pin
                           SEG3X_Pin SEG4X_Pin SEG5X_Pin SEG6X_Pin
                           EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 800217c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002180:	613b      	str	r3, [r7, #16]
                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2302      	movs	r3, #2
 800218c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	f107 0310 	add.w	r3, r7, #16
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_GPIO_Init+0xdc>)
 8002196:	f000 fc5d 	bl	8002a54 <HAL_GPIO_Init>

}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010800 	.word	0x40010800
 80021ac:	40010c00 	.word	0x40010c00
 80021b0:	40011000 	.word	0x40011000

080021b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
   SCH_Update();
 80021bc:	f000 f85a 	bl	8002274 <SCH_Update>
   getKeyInput();
 80021c0:	f7fd ffee 	bl	80001a0 <getKeyInput>
 }
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <Error_Handler+0x8>
	...

080021d8 <SCH_Add_Task>:
// Error_code_G = 0;
// Timer_init ( ) ;
// Watchdog_init ( ) ;
}

unsigned char SCH_Add_Task ( void (*pFunction) () , unsigned int DELAY,unsigned int PERIOD){
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	75fb      	strb	r3, [r7, #23]
 // Fi r s t find a gap in the array ( i f there i s one)
 while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 80021e8:	e002      	b.n	80021f0 <SCH_Add_Task+0x18>
 {
 Index ++;
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	3301      	adds	r3, #1
 80021ee:	75fb      	strb	r3, [r7, #23]
 while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 80021f0:	7dfa      	ldrb	r2, [r7, #23]
 80021f2:	491f      	ldr	r1, [pc, #124]	; (8002270 <SCH_Add_Task+0x98>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <SCH_Add_Task+0x32>
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b27      	cmp	r3, #39	; 0x27
 8002208:	d9ef      	bls.n	80021ea <SCH_Add_Task+0x12>
 }
  if ( Index == SCH_MAX_TASKS)
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b28      	cmp	r3, #40	; 0x28
 800220e:	d101      	bne.n	8002214 <SCH_Add_Task+0x3c>
 {
 // Task l i s t i s f u l l
 // Set the global e r ro r v a ri abl e
 //Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 // Also return an e r ro r code
 return SCH_MAX_TASKS;
 8002210:	2328      	movs	r3, #40	; 0x28
 8002212:	e027      	b.n	8002264 <SCH_Add_Task+0x8c>
 }
 // I f we ’re here , there i s a space in the task array
 SCH_tasks_G [ Index ] . pTask = pFunction ;
 8002214:	7dfa      	ldrb	r2, [r7, #23]
 8002216:	4916      	ldr	r1, [pc, #88]	; (8002270 <SCH_Add_Task+0x98>)
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	601a      	str	r2, [r3, #0]
 SCH_tasks_G [ Index ] . Delay = DELAY;
 8002226:	7dfa      	ldrb	r2, [r7, #23]
 8002228:	4911      	ldr	r1, [pc, #68]	; (8002270 <SCH_Add_Task+0x98>)
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3304      	adds	r3, #4
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	601a      	str	r2, [r3, #0]
 SCH_tasks_G [ Index ] . Period = PERIOD;
 800223a:	7dfa      	ldrb	r2, [r7, #23]
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <SCH_Add_Task+0x98>)
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3308      	adds	r3, #8
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]
 SCH_tasks_G [ Index ] .RunMe = 0;
 800224e:	7dfa      	ldrb	r2, [r7, #23]
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <SCH_Add_Task+0x98>)
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	330c      	adds	r3, #12
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
 // return posi tion o f task ( to allow l a t e r dele tion )
 return Index ;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 }
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000164 	.word	0x20000164

08002274 <SCH_Update>:

void SCH_Update ( void ) {
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 unsigned char Index ;
 // NOTE: c alcul a tions are in *TICKS*
 for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800227a:	2300      	movs	r3, #0
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	e05d      	b.n	800233c <SCH_Update+0xc8>
 // Check i f there i s a task a t t hi s loca tion
 if ( SCH_tasks_G [ Index ] . pTask ) {
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	4933      	ldr	r1, [pc, #204]	; (8002350 <SCH_Update+0xdc>)
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d050      	beq.n	8002336 <SCH_Update+0xc2>
	 if ( SCH_tasks_G [ Index ] . Delay == 0 ) {
 8002294:	79fa      	ldrb	r2, [r7, #7]
 8002296:	492e      	ldr	r1, [pc, #184]	; (8002350 <SCH_Update+0xdc>)
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3304      	adds	r3, #4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d132      	bne.n	8002310 <SCH_Update+0x9c>
 // The task i s due to run
 // Inc . the ’RunMe’ fl a g
 SCH_tasks_G [ Index ] .RunMe += 1;
 80022aa:	79fa      	ldrb	r2, [r7, #7]
 80022ac:	4928      	ldr	r1, [pc, #160]	; (8002350 <SCH_Update+0xdc>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	330c      	adds	r3, #12
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	79fa      	ldrb	r2, [r7, #7]
 80022be:	3301      	adds	r3, #1
 80022c0:	b2d8      	uxtb	r0, r3
 80022c2:	4923      	ldr	r1, [pc, #140]	; (8002350 <SCH_Update+0xdc>)
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	330c      	adds	r3, #12
 80022d0:	4602      	mov	r2, r0
 80022d2:	701a      	strb	r2, [r3, #0]
 	 if ( SCH_tasks_G [ Index ] . Period ) {
 80022d4:	79fa      	ldrb	r2, [r7, #7]
 80022d6:	491e      	ldr	r1, [pc, #120]	; (8002350 <SCH_Update+0xdc>)
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3308      	adds	r3, #8
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d025      	beq.n	8002336 <SCH_Update+0xc2>
 // Schedule periodic tasks to run again
 SCH_tasks_G [ Index ] . Delay = SCH_tasks_G [ Index ] . Period ;
 80022ea:	79f9      	ldrb	r1, [r7, #7]
 80022ec:	79fa      	ldrb	r2, [r7, #7]
 80022ee:	4818      	ldr	r0, [pc, #96]	; (8002350 <SCH_Update+0xdc>)
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4403      	add	r3, r0
 80022fa:	3308      	adds	r3, #8
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <SCH_Update+0xdc>)
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4403      	add	r3, r0
 800230a:	3304      	adds	r3, #4
 800230c:	6019      	str	r1, [r3, #0]
 800230e:	e012      	b.n	8002336 <SCH_Update+0xc2>
 }
 } else {
 // Not ye t ready to run : j u s t decrement the delay
 SCH_tasks_G [ Index ] . Delay -= 1;
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	490f      	ldr	r1, [pc, #60]	; (8002350 <SCH_Update+0xdc>)
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3304      	adds	r3, #4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	1e59      	subs	r1, r3, #1
 8002326:	480a      	ldr	r0, [pc, #40]	; (8002350 <SCH_Update+0xdc>)
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4403      	add	r3, r0
 8002332:	3304      	adds	r3, #4
 8002334:	6019      	str	r1, [r3, #0]
 for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	3301      	adds	r3, #1
 800233a:	71fb      	strb	r3, [r7, #7]
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	2b27      	cmp	r3, #39	; 0x27
 8002340:	d99e      	bls.n	8002280 <SCH_Update+0xc>
 }
 }
 }
 }
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000164 	.word	0x20000164

08002354 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks ( void ){
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 unsigned char Index ;
 // Dispatches (runs ) the next task ( i f one i s ready )
 for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800235a:	2300      	movs	r3, #0
 800235c:	71fb      	strb	r3, [r7, #7]
 800235e:	e03a      	b.n	80023d6 <SCH_Dispatch_Tasks+0x82>
 if ( SCH_tasks_G [ Index ] .RunMe > 0 ) {
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	4921      	ldr	r1, [pc, #132]	; (80023e8 <SCH_Dispatch_Tasks+0x94>)
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	330c      	adds	r3, #12
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d02c      	beq.n	80023d0 <SCH_Dispatch_Tasks+0x7c>
 ( * SCH_tasks_G [ Index ] . pTask ) ( ) ; // Run the task
 8002376:	79fa      	ldrb	r2, [r7, #7]
 8002378:	491b      	ldr	r1, [pc, #108]	; (80023e8 <SCH_Dispatch_Tasks+0x94>)
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4798      	blx	r3
 SCH_tasks_G [ Index ] .RunMe -= 1; // Reset / reduce RunMe fl a g
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	4917      	ldr	r1, [pc, #92]	; (80023e8 <SCH_Dispatch_Tasks+0x94>)
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	330c      	adds	r3, #12
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	79fa      	ldrb	r2, [r7, #7]
 800239c:	3b01      	subs	r3, #1
 800239e:	b2d8      	uxtb	r0, r3
 80023a0:	4911      	ldr	r1, [pc, #68]	; (80023e8 <SCH_Dispatch_Tasks+0x94>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	330c      	adds	r3, #12
 80023ae:	4602      	mov	r2, r0
 80023b0:	701a      	strb	r2, [r3, #0]
 // Periodic tasks will au toma tically run again
 // − i f t hi s i s a ’one shot ’ task , remove i t from the array
 if ( SCH_tasks_G [ Index ] . Period == 0 )
 80023b2:	79fa      	ldrb	r2, [r7, #7]
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <SCH_Dispatch_Tasks+0x94>)
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3308      	adds	r3, #8
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <SCH_Dispatch_Tasks+0x7c>
 {
 SCH_Delete_Task ( Index ) ;
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f80e 	bl	80023ec <SCH_Delete_Task>
 for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	3301      	adds	r3, #1
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b27      	cmp	r3, #39	; 0x27
 80023da:	d9c1      	bls.n	8002360 <SCH_Dispatch_Tasks+0xc>
 }
 // Report system s t a tus
 //SCH_Report_Status ( ) ;
 // The scheduler en ters i dl e mode a t t hi s point
// SCH_Go_To_Sleep ( ) ;
 }
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000164 	.word	0x20000164

080023ec <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t TASK_INDEX) {
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    // Đặt tất cả các trường của task tại TASK_INDEX về 0
    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80023f4:	4915      	ldr	r1, [pc, #84]	; (800244c <SCH_Delete_Task+0x60>)
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Delay = 0;
 8002406:	4911      	ldr	r1, [pc, #68]	; (800244c <SCH_Delete_Task+0x60>)
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	3304      	adds	r3, #4
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Period = 0;
 800241a:	490c      	ldr	r1, [pc, #48]	; (800244c <SCH_Delete_Task+0x60>)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3308      	adds	r3, #8
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].RunMe = 0;
 800242e:	4907      	ldr	r1, [pc, #28]	; (800244c <SCH_Delete_Task+0x60>)
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	330c      	adds	r3, #12
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20000164 	.word	0x20000164

08002450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_MspInit+0x5c>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4a14      	ldr	r2, [pc, #80]	; (80024ac <HAL_MspInit+0x5c>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6193      	str	r3, [r2, #24]
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_MspInit+0x5c>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_MspInit+0x5c>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <HAL_MspInit+0x5c>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <HAL_MspInit+0x5c>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_MspInit+0x60>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_MspInit+0x60>)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010000 	.word	0x40010000

080024b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c4:	d113      	bne.n	80024ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_TIM_Base_MspInit+0x44>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_TIM_Base_MspInit+0x44>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_TIM_Base_MspInit+0x44>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	201c      	movs	r0, #28
 80024e4:	f000 fa7f 	bl	80029e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e8:	201c      	movs	r0, #28
 80024ea:	f000 fa98 	bl	8002a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <NMI_Handler+0x4>

08002502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <HardFault_Handler+0x4>

08002508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <MemManage_Handler+0x4>

0800250e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <BusFault_Handler+0x4>

08002514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <UsageFault_Handler+0x4>

0800251a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002542:	f000 f95d 	bl	8002800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM2_IRQHandler+0x10>)
 8002552:	f001 f8b9 	bl	80036c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000011c 	.word	0x2000011c

08002560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <set_led>:
 *      Author: ADMIN
 */

#include "traffic_light.h"

void set_led(){
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED1_Pin|LED_YELLOW2_Pin
 8002570:	2201      	movs	r2, #1
 8002572:	21fe      	movs	r1, #254	; 0xfe
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <set_led+0x14>)
 8002576:	f000 fbfe 	bl	8002d76 <HAL_GPIO_WritePin>
	                          |LED_RED_Pin|LED_GREEN2_Pin|LED_RED2_Pin, GPIO_PIN_SET);
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40010800 	.word	0x40010800

08002584 <Turn_On_All_LED_RED>:

void Turn_On_All_LED_RED(){
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	2112      	movs	r1, #18
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <Turn_On_All_LED_RED+0x28>)
 800258e:	f000 fbf2 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , SET);
 8002592:	2201      	movs	r2, #1
 8002594:	2144      	movs	r1, #68	; 0x44
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <Turn_On_All_LED_RED+0x28>)
 8002598:	f000 fbed 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , SET);
 800259c:	2201      	movs	r2, #1
 800259e:	2188      	movs	r1, #136	; 0x88
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <Turn_On_All_LED_RED+0x28>)
 80025a2:	f000 fbe8 	bl	8002d76 <HAL_GPIO_WritePin>
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40010800 	.word	0x40010800

080025b0 <Turn_On_All_LED_GREEN>:
void Turn_On_All_LED_GREEN(){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2144      	movs	r1, #68	; 0x44
 80025b8:	4807      	ldr	r0, [pc, #28]	; (80025d8 <Turn_On_All_LED_GREEN+0x28>)
 80025ba:	f000 fbdc 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , SET);
 80025be:	2201      	movs	r2, #1
 80025c0:	2112      	movs	r1, #18
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <Turn_On_All_LED_GREEN+0x28>)
 80025c4:	f000 fbd7 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , SET);
 80025c8:	2201      	movs	r2, #1
 80025ca:	2188      	movs	r1, #136	; 0x88
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <Turn_On_All_LED_GREEN+0x28>)
 80025ce:	f000 fbd2 	bl	8002d76 <HAL_GPIO_WritePin>
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40010800 	.word	0x40010800

080025dc <Turn_On_All_LED_YELLOW>:
void Turn_On_All_LED_YELLOW(){
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , RESET);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2188      	movs	r1, #136	; 0x88
 80025e4:	4807      	ldr	r0, [pc, #28]	; (8002604 <Turn_On_All_LED_YELLOW+0x28>)
 80025e6:	f000 fbc6 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	2144      	movs	r1, #68	; 0x44
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <Turn_On_All_LED_YELLOW+0x28>)
 80025f0:	f000 fbc1 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2112      	movs	r1, #18
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <Turn_On_All_LED_YELLOW+0x28>)
 80025fa:	f000 fbbc 	bl	8002d76 <HAL_GPIO_WritePin>
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40010800 	.word	0x40010800

08002608 <LED_RED1_GREEN2>:
void LED_RED1_GREEN2(){
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800260c:	2201      	movs	r2, #1
 800260e:	2110      	movs	r1, #16
 8002610:	480e      	ldr	r0, [pc, #56]	; (800264c <LED_RED1_GREEN2+0x44>)
 8002612:	f000 fbb0 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8002616:	2201      	movs	r2, #1
 8002618:	2104      	movs	r1, #4
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <LED_RED1_GREEN2+0x44>)
 800261c:	f000 fbab 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8002620:	2201      	movs	r2, #1
 8002622:	2108      	movs	r1, #8
 8002624:	4809      	ldr	r0, [pc, #36]	; (800264c <LED_RED1_GREEN2+0x44>)
 8002626:	f000 fba6 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 800262a:	2201      	movs	r2, #1
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	4807      	ldr	r0, [pc, #28]	; (800264c <LED_RED1_GREEN2+0x44>)
 8002630:	f000 fba1 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	2102      	movs	r1, #2
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <LED_RED1_GREEN2+0x44>)
 800263a:	f000 fb9c 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2140      	movs	r1, #64	; 0x40
 8002642:	4802      	ldr	r0, [pc, #8]	; (800264c <LED_RED1_GREEN2+0x44>)
 8002644:	f000 fb97 	bl	8002d76 <HAL_GPIO_WritePin>
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40010800 	.word	0x40010800

08002650 <LED_RED1_YELLOW2>:

void LED_RED1_YELLOW2(){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8002654:	2201      	movs	r2, #1
 8002656:	2110      	movs	r1, #16
 8002658:	480e      	ldr	r0, [pc, #56]	; (8002694 <LED_RED1_YELLOW2+0x44>)
 800265a:	f000 fb8c 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800265e:	2201      	movs	r2, #1
 8002660:	2104      	movs	r1, #4
 8002662:	480c      	ldr	r0, [pc, #48]	; (8002694 <LED_RED1_YELLOW2+0x44>)
 8002664:	f000 fb87 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8002668:	2201      	movs	r2, #1
 800266a:	2108      	movs	r1, #8
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <LED_RED1_YELLOW2+0x44>)
 800266e:	f000 fb82 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8002672:	2201      	movs	r2, #1
 8002674:	2140      	movs	r1, #64	; 0x40
 8002676:	4807      	ldr	r0, [pc, #28]	; (8002694 <LED_RED1_YELLOW2+0x44>)
 8002678:	f000 fb7d 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800267c:	2200      	movs	r2, #0
 800267e:	2102      	movs	r1, #2
 8002680:	4804      	ldr	r0, [pc, #16]	; (8002694 <LED_RED1_YELLOW2+0x44>)
 8002682:	f000 fb78 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	4802      	ldr	r0, [pc, #8]	; (8002694 <LED_RED1_YELLOW2+0x44>)
 800268c:	f000 fb73 	bl	8002d76 <HAL_GPIO_WritePin>
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010800 	.word	0x40010800

08002698 <LED_GREEN1_RED2>:

void LED_GREEN1_RED2(){
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800269c:	2201      	movs	r2, #1
 800269e:	2102      	movs	r1, #2
 80026a0:	480e      	ldr	r0, [pc, #56]	; (80026dc <LED_GREEN1_RED2+0x44>)
 80026a2:	f000 fb68 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80026a6:	2201      	movs	r2, #1
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	480c      	ldr	r0, [pc, #48]	; (80026dc <LED_GREEN1_RED2+0x44>)
 80026ac:	f000 fb63 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	2108      	movs	r1, #8
 80026b4:	4809      	ldr	r0, [pc, #36]	; (80026dc <LED_GREEN1_RED2+0x44>)
 80026b6:	f000 fb5e 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80026ba:	2201      	movs	r2, #1
 80026bc:	2140      	movs	r1, #64	; 0x40
 80026be:	4807      	ldr	r0, [pc, #28]	; (80026dc <LED_GREEN1_RED2+0x44>)
 80026c0:	f000 fb59 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2104      	movs	r1, #4
 80026c8:	4804      	ldr	r0, [pc, #16]	; (80026dc <LED_GREEN1_RED2+0x44>)
 80026ca:	f000 fb54 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2110      	movs	r1, #16
 80026d2:	4802      	ldr	r0, [pc, #8]	; (80026dc <LED_GREEN1_RED2+0x44>)
 80026d4:	f000 fb4f 	bl	8002d76 <HAL_GPIO_WritePin>
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40010800 	.word	0x40010800

080026e0 <LED_YELLOW1_RED2>:

void LED_YELLOW1_RED2(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	2102      	movs	r1, #2
 80026e8:	480e      	ldr	r0, [pc, #56]	; (8002724 <LED_YELLOW1_RED2+0x44>)
 80026ea:	f000 fb44 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	480c      	ldr	r0, [pc, #48]	; (8002724 <LED_YELLOW1_RED2+0x44>)
 80026f4:	f000 fb3f 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80026f8:	2201      	movs	r2, #1
 80026fa:	2104      	movs	r1, #4
 80026fc:	4809      	ldr	r0, [pc, #36]	; (8002724 <LED_YELLOW1_RED2+0x44>)
 80026fe:	f000 fb3a 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8002702:	2201      	movs	r2, #1
 8002704:	2140      	movs	r1, #64	; 0x40
 8002706:	4807      	ldr	r0, [pc, #28]	; (8002724 <LED_YELLOW1_RED2+0x44>)
 8002708:	f000 fb35 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	2108      	movs	r1, #8
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <LED_YELLOW1_RED2+0x44>)
 8002712:	f000 fb30 	bl	8002d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8002716:	2200      	movs	r2, #0
 8002718:	2110      	movs	r1, #16
 800271a:	4802      	ldr	r0, [pc, #8]	; (8002724 <LED_YELLOW1_RED2+0x44>)
 800271c:	f000 fb2b 	bl	8002d76 <HAL_GPIO_WritePin>
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40010800 	.word	0x40010800

08002728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002728:	f7ff ff1a 	bl	8002560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480b      	ldr	r0, [pc, #44]	; (800275c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800272e:	490c      	ldr	r1, [pc, #48]	; (8002760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002744:	4c09      	ldr	r4, [pc, #36]	; (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f001 faf9 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002756:	f7ff fc15 	bl	8001f84 <main>
  bx lr
 800275a:	4770      	bx	lr
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002764:	08003df0 	.word	0x08003df0
  ldr r2, =_sbss
 8002768:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800276c:	20000488 	.word	0x20000488

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>
	...

08002774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_Init+0x28>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_Init+0x28>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002784:	2003      	movs	r0, #3
 8002786:	f000 f923 	bl	80029d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278a:	200f      	movs	r0, #15
 800278c:	f000 f808 	bl	80027a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002790:	f7ff fe5e 	bl	8002450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40022000 	.word	0x40022000

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_InitTick+0x54>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_InitTick+0x58>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f93b 	bl	8002a3a <HAL_SYSTICK_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00e      	b.n	80027ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d80a      	bhi.n	80027ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f000 f903 	bl	80029e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e0:	4a06      	ldr	r2, [pc, #24]	; (80027fc <HAL_InitTick+0x5c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000068 	.word	0x20000068
 80027f8:	20000070 	.word	0x20000070
 80027fc:	2000006c 	.word	0x2000006c

08002800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_IncTick+0x1c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_IncTick+0x20>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <HAL_IncTick+0x20>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000070 	.word	0x20000070
 8002820:	20000484 	.word	0x20000484

08002824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b02      	ldr	r3, [pc, #8]	; (8002834 <HAL_GetTick+0x10>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000484 	.word	0x20000484

08002838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286a:	4a04      	ldr	r2, [pc, #16]	; (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	60d3      	str	r3, [r2, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <__NVIC_GetPriorityGrouping+0x18>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 0307 	and.w	r3, r3, #7
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	db0b      	blt.n	80028c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4906      	ldr	r1, [pc, #24]	; (80028d0 <__NVIC_EnableIRQ+0x34>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2001      	movs	r0, #1
 80028be:	fa00 f202 	lsl.w	r2, r0, r2
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800299c:	d301      	bcc.n	80029a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299e:	2301      	movs	r3, #1
 80029a0:	e00f      	b.n	80029c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <SysTick_Config+0x40>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029aa:	210f      	movs	r1, #15
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f7ff ff90 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <SysTick_Config+0x40>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ba:	4b04      	ldr	r3, [pc, #16]	; (80029cc <SysTick_Config+0x40>)
 80029bc:	2207      	movs	r2, #7
 80029be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	e000e010 	.word	0xe000e010

080029d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff2d 	bl	8002838 <__NVIC_SetPriorityGrouping>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f8:	f7ff ff42 	bl	8002880 <__NVIC_GetPriorityGrouping>
 80029fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f7ff ff90 	bl	8002928 <NVIC_EncodePriority>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff5f 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff35 	bl	800289c <__NVIC_EnableIRQ>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ffa2 	bl	800298c <SysTick_Config>
 8002a48:	4603      	mov	r3, r0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b08b      	sub	sp, #44	; 0x2c
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a66:	e148      	b.n	8002cfa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 8137 	bne.w	8002cf4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4aa3      	ldr	r2, [pc, #652]	; (8002d18 <HAL_GPIO_Init+0x2c4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d05e      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002a90:	4aa1      	ldr	r2, [pc, #644]	; (8002d18 <HAL_GPIO_Init+0x2c4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d875      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002a96:	4aa1      	ldr	r2, [pc, #644]	; (8002d1c <HAL_GPIO_Init+0x2c8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d058      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002a9c:	4a9f      	ldr	r2, [pc, #636]	; (8002d1c <HAL_GPIO_Init+0x2c8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d86f      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aa2:	4a9f      	ldr	r2, [pc, #636]	; (8002d20 <HAL_GPIO_Init+0x2cc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d052      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002aa8:	4a9d      	ldr	r2, [pc, #628]	; (8002d20 <HAL_GPIO_Init+0x2cc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d869      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aae:	4a9d      	ldr	r2, [pc, #628]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d04c      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002ab4:	4a9b      	ldr	r2, [pc, #620]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d863      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aba:	4a9b      	ldr	r2, [pc, #620]	; (8002d28 <HAL_GPIO_Init+0x2d4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d046      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002ac0:	4a99      	ldr	r2, [pc, #612]	; (8002d28 <HAL_GPIO_Init+0x2d4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d85d      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002ac6:	2b12      	cmp	r3, #18
 8002ac8:	d82a      	bhi.n	8002b20 <HAL_GPIO_Init+0xcc>
 8002aca:	2b12      	cmp	r3, #18
 8002acc:	d859      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <HAL_GPIO_Init+0x80>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b4f 	.word	0x08002b4f
 8002ad8:	08002b29 	.word	0x08002b29
 8002adc:	08002b3b 	.word	0x08002b3b
 8002ae0:	08002b7d 	.word	0x08002b7d
 8002ae4:	08002b83 	.word	0x08002b83
 8002ae8:	08002b83 	.word	0x08002b83
 8002aec:	08002b83 	.word	0x08002b83
 8002af0:	08002b83 	.word	0x08002b83
 8002af4:	08002b83 	.word	0x08002b83
 8002af8:	08002b83 	.word	0x08002b83
 8002afc:	08002b83 	.word	0x08002b83
 8002b00:	08002b83 	.word	0x08002b83
 8002b04:	08002b83 	.word	0x08002b83
 8002b08:	08002b83 	.word	0x08002b83
 8002b0c:	08002b83 	.word	0x08002b83
 8002b10:	08002b83 	.word	0x08002b83
 8002b14:	08002b83 	.word	0x08002b83
 8002b18:	08002b31 	.word	0x08002b31
 8002b1c:	08002b45 	.word	0x08002b45
 8002b20:	4a82      	ldr	r2, [pc, #520]	; (8002d2c <HAL_GPIO_Init+0x2d8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b26:	e02c      	b.n	8002b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	623b      	str	r3, [r7, #32]
          break;
 8002b2e:	e029      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	3304      	adds	r3, #4
 8002b36:	623b      	str	r3, [r7, #32]
          break;
 8002b38:	e024      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	623b      	str	r3, [r7, #32]
          break;
 8002b42:	e01f      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	623b      	str	r3, [r7, #32]
          break;
 8002b4c:	e01a      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b56:	2304      	movs	r3, #4
 8002b58:	623b      	str	r3, [r7, #32]
          break;
 8002b5a:	e013      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b64:	2308      	movs	r3, #8
 8002b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	611a      	str	r2, [r3, #16]
          break;
 8002b6e:	e009      	b.n	8002b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b70:	2308      	movs	r3, #8
 8002b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	615a      	str	r2, [r3, #20]
          break;
 8002b7a:	e003      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
          break;
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          break;
 8002b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2bff      	cmp	r3, #255	; 0xff
 8002b88:	d801      	bhi.n	8002b8e <HAL_GPIO_Init+0x13a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	e001      	b.n	8002b92 <HAL_GPIO_Init+0x13e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2bff      	cmp	r3, #255	; 0xff
 8002b98:	d802      	bhi.n	8002ba0 <HAL_GPIO_Init+0x14c>
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	e002      	b.n	8002ba6 <HAL_GPIO_Init+0x152>
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	3b08      	subs	r3, #8
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	210f      	movs	r1, #15
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8090 	beq.w	8002cf4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bd4:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <HAL_GPIO_Init+0x2dc>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	4a55      	ldr	r2, [pc, #340]	; (8002d30 <HAL_GPIO_Init+0x2dc>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6193      	str	r3, [r2, #24]
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_GPIO_Init+0x2dc>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bec:	4a51      	ldr	r2, [pc, #324]	; (8002d34 <HAL_GPIO_Init+0x2e0>)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a49      	ldr	r2, [pc, #292]	; (8002d38 <HAL_GPIO_Init+0x2e4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00d      	beq.n	8002c34 <HAL_GPIO_Init+0x1e0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a48      	ldr	r2, [pc, #288]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <HAL_GPIO_Init+0x1dc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a47      	ldr	r2, [pc, #284]	; (8002d40 <HAL_GPIO_Init+0x2ec>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_GPIO_Init+0x1d8>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e004      	b.n	8002c36 <HAL_GPIO_Init+0x1e2>
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e002      	b.n	8002c36 <HAL_GPIO_Init+0x1e2>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_GPIO_Init+0x1e2>
 8002c34:	2300      	movs	r3, #0
 8002c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c38:	f002 0203 	and.w	r2, r2, #3
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	4093      	lsls	r3, r2
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c46:	493b      	ldr	r1, [pc, #236]	; (8002d34 <HAL_GPIO_Init+0x2e0>)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	089b      	lsrs	r3, r3, #2
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c60:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	4937      	ldr	r1, [pc, #220]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	4933      	ldr	r1, [pc, #204]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c88:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	492d      	ldr	r1, [pc, #180]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
 8002c94:	e006      	b.n	8002ca4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	4929      	ldr	r1, [pc, #164]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	4923      	ldr	r1, [pc, #140]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	491f      	ldr	r1, [pc, #124]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4919      	ldr	r1, [pc, #100]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	4915      	ldr	r1, [pc, #84]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f47f aeaf 	bne.w	8002a68 <HAL_GPIO_Init+0x14>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	372c      	adds	r7, #44	; 0x2c
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	10320000 	.word	0x10320000
 8002d1c:	10310000 	.word	0x10310000
 8002d20:	10220000 	.word	0x10220000
 8002d24:	10210000 	.word	0x10210000
 8002d28:	10120000 	.word	0x10120000
 8002d2c:	10110000 	.word	0x10110000
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40010800 	.word	0x40010800
 8002d3c:	40010c00 	.word	0x40010c00
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40010400 	.word	0x40010400

08002d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e001      	b.n	8002d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	807b      	strh	r3, [r7, #2]
 8002d82:	4613      	mov	r3, r2
 8002d84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d86:	787b      	ldrb	r3, [r7, #1]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8c:	887a      	ldrh	r2, [r7, #2]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d92:	e003      	b.n	8002d9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	041a      	lsls	r2, r3, #16
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	611a      	str	r2, [r3, #16]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002db8:	887a      	ldrh	r2, [r7, #2]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	041a      	lsls	r2, r3, #16
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	43d9      	mvns	r1, r3
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	611a      	str	r2, [r3, #16]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e26c      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8087 	beq.w	8002f06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df8:	4b92      	ldr	r3, [pc, #584]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d00c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e04:	4b8f      	ldr	r3, [pc, #572]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d112      	bne.n	8002e36 <HAL_RCC_OscConfig+0x5e>
 8002e10:	4b8c      	ldr	r3, [pc, #560]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d10b      	bne.n	8002e36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1e:	4b89      	ldr	r3, [pc, #548]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d06c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x12c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d168      	bne.n	8002f04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e246      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x76>
 8002e40:	4b80      	ldr	r3, [pc, #512]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7f      	ldr	r2, [pc, #508]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	e02e      	b.n	8002eac <HAL_RCC_OscConfig+0xd4>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x98>
 8002e56:	4b7b      	ldr	r3, [pc, #492]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a7a      	ldr	r2, [pc, #488]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4b78      	ldr	r3, [pc, #480]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a77      	ldr	r2, [pc, #476]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e01d      	b.n	8002eac <HAL_RCC_OscConfig+0xd4>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0xbc>
 8002e7a:	4b72      	ldr	r3, [pc, #456]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a71      	ldr	r2, [pc, #452]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b6f      	ldr	r3, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6e      	ldr	r2, [pc, #440]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0xd4>
 8002e94:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a6a      	ldr	r2, [pc, #424]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b68      	ldr	r3, [pc, #416]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a67      	ldr	r2, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d013      	beq.n	8002edc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7ff fcb6 	bl	8002824 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7ff fcb2 	bl	8002824 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e1fa      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0xe4>
 8002eda:	e014      	b.n	8002f06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff fca2 	bl	8002824 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7ff fc9e 	bl	8002824 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e1e6      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x10c>
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d063      	beq.n	8002fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f12:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00b      	beq.n	8002f36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f1e:	4b49      	ldr	r3, [pc, #292]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d11c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x18c>
 8002f2a:	4b46      	ldr	r3, [pc, #280]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d116      	bne.n	8002f64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	4b43      	ldr	r3, [pc, #268]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_RCC_OscConfig+0x176>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e1ba      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4939      	ldr	r1, [pc, #228]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	e03a      	b.n	8002fda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6c:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7ff fc57 	bl	8002824 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7a:	f7ff fc53 	bl	8002824 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e19b      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4927      	ldr	r1, [pc, #156]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	e015      	b.n	8002fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7ff fc36 	bl	8002824 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbc:	f7ff fc32 	bl	8002824 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e17a      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d03a      	beq.n	800305c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d019      	beq.n	8003022 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <HAL_RCC_OscConfig+0x274>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7ff fc16 	bl	8002824 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffc:	f7ff fc12 	bl	8002824 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e15a      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCC_OscConfig+0x26c>)
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800301a:	2001      	movs	r0, #1
 800301c:	f000 fa9a 	bl	8003554 <RCC_Delay>
 8003020:	e01c      	b.n	800305c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_RCC_OscConfig+0x274>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7ff fbfc 	bl	8002824 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302e:	e00f      	b.n	8003050 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003030:	f7ff fbf8 	bl	8002824 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d908      	bls.n	8003050 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e140      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	42420000 	.word	0x42420000
 800304c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	4b9e      	ldr	r3, [pc, #632]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e9      	bne.n	8003030 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a6 	beq.w	80031b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306e:	4b97      	ldr	r3, [pc, #604]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	4b94      	ldr	r3, [pc, #592]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4a93      	ldr	r2, [pc, #588]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003084:	61d3      	str	r3, [r2, #28]
 8003086:	4b91      	ldr	r3, [pc, #580]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003096:	4b8e      	ldr	r3, [pc, #568]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d118      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a2:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a8a      	ldr	r2, [pc, #552]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ae:	f7ff fbb9 	bl	8002824 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b6:	f7ff fbb5 	bl	8002824 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b64      	cmp	r3, #100	; 0x64
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0fd      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	4b81      	ldr	r3, [pc, #516]	; (80032d0 <HAL_RCC_OscConfig+0x4f8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x312>
 80030dc:	4b7b      	ldr	r3, [pc, #492]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4a7a      	ldr	r2, [pc, #488]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6213      	str	r3, [r2, #32]
 80030e8:	e02d      	b.n	8003146 <HAL_RCC_OscConfig+0x36e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x334>
 80030f2:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4a75      	ldr	r2, [pc, #468]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	6213      	str	r3, [r2, #32]
 80030fe:	4b73      	ldr	r3, [pc, #460]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4a72      	ldr	r2, [pc, #456]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	6213      	str	r3, [r2, #32]
 800310a:	e01c      	b.n	8003146 <HAL_RCC_OscConfig+0x36e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d10c      	bne.n	800312e <HAL_RCC_OscConfig+0x356>
 8003114:	4b6d      	ldr	r3, [pc, #436]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4a6c      	ldr	r2, [pc, #432]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	6213      	str	r3, [r2, #32]
 8003120:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a69      	ldr	r2, [pc, #420]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	e00b      	b.n	8003146 <HAL_RCC_OscConfig+0x36e>
 800312e:	4b67      	ldr	r3, [pc, #412]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4a66      	ldr	r2, [pc, #408]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6213      	str	r3, [r2, #32]
 800313a:	4b64      	ldr	r3, [pc, #400]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a63      	ldr	r2, [pc, #396]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d015      	beq.n	800317a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7ff fb69 	bl	8002824 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7ff fb65 	bl	8002824 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0ab      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	4b57      	ldr	r3, [pc, #348]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ee      	beq.n	8003156 <HAL_RCC_OscConfig+0x37e>
 8003178:	e014      	b.n	80031a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317a:	f7ff fb53 	bl	8002824 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7ff fb4f 	bl	8002824 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e095      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	4b4c      	ldr	r3, [pc, #304]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ee      	bne.n	8003182 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b48      	ldr	r3, [pc, #288]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4a47      	ldr	r2, [pc, #284]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8081 	beq.w	80032c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c0:	4b42      	ldr	r3, [pc, #264]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d061      	beq.n	8003290 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d146      	bne.n	8003262 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCC_OscConfig+0x4fc>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7ff fb23 	bl	8002824 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e2:	f7ff fb1f 	bl	8002824 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e067      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d108      	bne.n	800321c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	492d      	ldr	r1, [pc, #180]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321c:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a19      	ldr	r1, [r3, #32]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	430b      	orrs	r3, r1
 800322e:	4927      	ldr	r1, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003234:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_RCC_OscConfig+0x4fc>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323a:	f7ff faf3 	bl	8002824 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003242:	f7ff faef 	bl	8002824 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e037      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x46a>
 8003260:	e02f      	b.n	80032c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <HAL_RCC_OscConfig+0x4fc>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7ff fadc 	bl	8002824 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7ff fad8 	bl	8002824 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e020      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x498>
 800328e:	e018      	b.n	80032c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e013      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_OscConfig+0x4f4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42420060 	.word	0x42420060

080032d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0d0      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d910      	bls.n	800331c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4965      	ldr	r1, [pc, #404]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b8      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003334:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800333e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003356:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	494d      	ldr	r1, [pc, #308]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d040      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d115      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e07f      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e073      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b39      	ldr	r3, [pc, #228]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c8:	f7ff fa2c 	bl	8002824 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7ff fa28 	bl	8002824 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e053      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d210      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4922      	ldr	r1, [pc, #136]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e032      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4916      	ldr	r1, [pc, #88]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003466:	f000 f821 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800346a:	4602      	mov	r2, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	490a      	ldr	r1, [pc, #40]	; (80034a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003478:	5ccb      	ldrb	r3, [r1, r3]
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff f98a 	bl	80027a0 <HAL_InitTick>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	08003dc4 	.word	0x08003dc4
 80034a4:	20000068 	.word	0x20000068
 80034a8:	2000006c 	.word	0x2000006c

080034ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCC_GetSysClockFreq+0x94>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d002      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x30>
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x36>
 80034da:	e027      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 80034de:	613b      	str	r3, [r7, #16]
      break;
 80034e0:	e027      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	0c9b      	lsrs	r3, r3, #18
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034ec:	5cd3      	ldrb	r3, [r2, r3]
 80034ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d010      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_GetSysClockFreq+0x94>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	0c5b      	lsrs	r3, r3, #17
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	4a11      	ldr	r2, [pc, #68]	; (800354c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 800350e:	fb02 f203 	mul.w	r2, r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e004      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	613b      	str	r3, [r7, #16]
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 800352e:	613b      	str	r3, [r7, #16]
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	693b      	ldr	r3, [r7, #16]
}
 8003534:	4618      	mov	r0, r3
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	007a1200 	.word	0x007a1200
 8003548:	08003dd4 	.word	0x08003dd4
 800354c:	08003de4 	.word	0x08003de4
 8003550:	003d0900 	.word	0x003d0900

08003554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <RCC_Delay+0x34>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0a      	ldr	r2, [pc, #40]	; (800358c <RCC_Delay+0x38>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0a5b      	lsrs	r3, r3, #9
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003570:	bf00      	nop
  }
  while (Delay --);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	60fa      	str	r2, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f9      	bne.n	8003570 <RCC_Delay+0x1c>
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20000068 	.word	0x20000068
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e041      	b.n	8003626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fe ff7c 	bl	80024b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 fa56 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e035      	b.n	80036b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_TIM_Base_Start_IT+0x90>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <HAL_TIM_Base_Start_IT+0x4e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d004      	beq.n	800367e <HAL_TIM_Base_Start_IT+0x4e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <HAL_TIM_Base_Start_IT+0x94>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d111      	bne.n	80036a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d010      	beq.n	80036b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	e007      	b.n	80036b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400

080036c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0202 	mvn.w	r2, #2
 80036fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f998 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f98b 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f99a 	bl	8003a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0204 	mvn.w	r2, #4
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f972 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f965 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f974 	bl	8003a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d020      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0208 	mvn.w	r2, #8
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f94c 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f93f 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f94e 	bl	8003a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d020      	beq.n	8003810 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0210 	mvn.w	r2, #16
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2208      	movs	r2, #8
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f926 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f919 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f928 	bl	8003a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0201 	mvn.w	r2, #1
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fcc0 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa6f 	bl	8003d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8f8 	bl	8003a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0220 	mvn.w	r2, #32
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa42 	bl	8003d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e0b4      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x186>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	d03e      	beq.n	800397c <HAL_TIM_ConfigClockSource+0xd4>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	f200 8087 	bhi.w	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390a:	f000 8086 	beq.w	8003a1a <HAL_TIM_ConfigClockSource+0x172>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d87f      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b70      	cmp	r3, #112	; 0x70
 8003916:	d01a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xa6>
 8003918:	2b70      	cmp	r3, #112	; 0x70
 800391a:	d87b      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b60      	cmp	r3, #96	; 0x60
 800391e:	d050      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003920:	2b60      	cmp	r3, #96	; 0x60
 8003922:	d877      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b50      	cmp	r3, #80	; 0x50
 8003926:	d03c      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003928:	2b50      	cmp	r3, #80	; 0x50
 800392a:	d873      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d058      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d86f      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b30      	cmp	r3, #48	; 0x30
 8003936:	d064      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	2b30      	cmp	r3, #48	; 0x30
 800393a:	d86b      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b20      	cmp	r3, #32
 800393e:	d060      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15a>
 8003940:	2b20      	cmp	r3, #32
 8003942:	d867      	bhi.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05c      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15a>
 8003948:	2b10      	cmp	r3, #16
 800394a:	d05a      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x15a>
 800394c:	e062      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f000 f96a 	bl	8003c36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	609a      	str	r2, [r3, #8]
      break;
 800397a:	e04f      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6899      	ldr	r1, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f000 f953 	bl	8003c36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800399e:	609a      	str	r2, [r3, #8]
      break;
 80039a0:	e03c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f000 f8ca 	bl	8003b48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2150      	movs	r1, #80	; 0x50
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f921 	bl	8003c02 <TIM_ITRx_SetConfig>
      break;
 80039c0:	e02c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 f8e8 	bl	8003ba4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2160      	movs	r1, #96	; 0x60
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f911 	bl	8003c02 <TIM_ITRx_SetConfig>
      break;
 80039e0:	e01c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 f8aa 	bl	8003b48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2140      	movs	r1, #64	; 0x40
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f901 	bl	8003c02 <TIM_ITRx_SetConfig>
      break;
 8003a00:	e00c      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f000 f8f8 	bl	8003c02 <TIM_ITRx_SetConfig>
      break;
 8003a12:	e003      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      break;
 8003a18:	e000      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
	...

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <TIM_Base_SetConfig+0xc0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x28>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x28>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <TIM_Base_SetConfig+0xc4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <TIM_Base_SetConfig+0xc0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0x52>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0x52>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <TIM_Base_SetConfig+0xc4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <TIM_Base_SetConfig+0xc0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d103      	bne.n	8003b18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f023 0201 	bic.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	611a      	str	r2, [r3, #16]
  }
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400

08003b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f023 0201 	bic.w	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f023 030a 	bic.w	r3, r3, #10
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0210 	bic.w	r2, r3, #16
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	031b      	lsls	r3, r3, #12
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003be0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	621a      	str	r2, [r3, #32]
}
 8003bf8:	bf00      	nop
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f043 0307 	orr.w	r3, r3, #7
 8003c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b087      	sub	sp, #28
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	021a      	lsls	r2, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	609a      	str	r2, [r3, #8]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e041      	b.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	d004      	beq.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d10c      	bne.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40012c00 	.word	0x40012c00
 8003d20:	40000400 	.word	0x40000400

08003d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	4d0c      	ldr	r5, [pc, #48]	; (8003d80 <__libc_init_array+0x38>)
 8003d4e:	4c0d      	ldr	r4, [pc, #52]	; (8003d84 <__libc_init_array+0x3c>)
 8003d50:	1b64      	subs	r4, r4, r5
 8003d52:	10a4      	asrs	r4, r4, #2
 8003d54:	42a6      	cmp	r6, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	f000 f822 	bl	8003da0 <_init>
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	4d0a      	ldr	r5, [pc, #40]	; (8003d88 <__libc_init_array+0x40>)
 8003d60:	4c0a      	ldr	r4, [pc, #40]	; (8003d8c <__libc_init_array+0x44>)
 8003d62:	1b64      	subs	r4, r4, r5
 8003d64:	10a4      	asrs	r4, r4, #2
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d70:	4798      	blx	r3
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7a:	4798      	blx	r3
 8003d7c:	3601      	adds	r6, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08003de8 	.word	0x08003de8
 8003d84:	08003de8 	.word	0x08003de8
 8003d88:	08003de8 	.word	0x08003de8
 8003d8c:	08003dec 	.word	0x08003dec

08003d90 <memset>:
 8003d90:	4603      	mov	r3, r0
 8003d92:	4402      	add	r2, r0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
